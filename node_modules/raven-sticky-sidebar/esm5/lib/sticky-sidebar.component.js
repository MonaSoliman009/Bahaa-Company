/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, ViewChild, Input } from '@angular/core';
var StickySidebarComponent = /** @class */ (function () {
    function StickySidebarComponent(_hostElementRef) {
        this._hostElementRef = _hostElementRef;
        this.customTopOffset = 0;
        this._containerElement = document.documentElement;
        this._scrollTop = 0;
        this._scrollDirection = 'down';
    }
    Object.defineProperty(StickySidebarComponent.prototype, "containerSelector", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._containerElement = document.querySelector(value);
            if (this._wrapperElement) {
                this.reset();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StickySidebarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._wrapperElement = (/** @type {?} */ (this.wrapperElementRef.nativeElement));
        this.reset();
        this.addScrollListener();
        this.addResizeListener();
    };
    /**
     * Resets sidebar based on current conditions.
     */
    /**
     * Resets sidebar based on current conditions.
     * @return {?}
     */
    StickySidebarComponent.prototype.reset = /**
     * Resets sidebar based on current conditions.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hostElement = (/** @type {?} */ (this._hostElementRef.nativeElement));
        hostElement.style.minHeight = '0';
        this.setSidebarHeight();
        this.initTopOffset();
        this._scrollTop = this._containerElement.scrollTop;
    };
    /**
     * Ensures the minimum height of the sidebar is the same as the container
     * when floats are used.
     */
    /**
     * Ensures the minimum height of the sidebar is the same as the container
     * when floats are used.
     * @param {?=} height
     * @return {?}
     */
    StickySidebarComponent.prototype.setSidebarHeight = /**
     * Ensures the minimum height of the sidebar is the same as the container
     * when floats are used.
     * @param {?=} height
     * @return {?}
     */
    function (height) {
        /** @type {?} */
        var hostElement = (/** @type {?} */ (this._hostElementRef.nativeElement));
        if (getComputedStyle(hostElement).cssFloat === 'none') {
            return;
        }
        /** @type {?} */
        var containerHeight;
        if (height) {
            containerHeight = height;
        }
        else {
            containerHeight = (this._containerElement === document.documentElement) ?
                hostElement.parentElement.offsetHeight :
                this.getContentBoxHeight(this._containerElement);
        }
        hostElement.style.minHeight = containerHeight + 'px';
        if (this._containerElement !== document.documentElement) {
            // Height change may have changed container height
            /** @type {?} */
            var newContainerHeight = this.getContentBoxHeight(this._containerElement);
            if (hostElement.offsetHeight < newContainerHeight) {
                this.setSidebarHeight(newContainerHeight);
            }
        }
    };
    /**
     * Initializes the "top" CSS property of the wrapper element.
     */
    /**
     * Initializes the "top" CSS property of the wrapper element.
     * @return {?}
     */
    StickySidebarComponent.prototype.initTopOffset = /**
     * Initializes the "top" CSS property of the wrapper element.
     * @return {?}
     */
    function () {
        // Measure container and wrapper height
        /** @type {?} */
        var containerHeight = this.getContentBoxHeight(this._containerElement, true);
        /** @type {?} */
        var wrapperHeight = this._wrapperElement.offsetHeight;
        // Set top offset
        /** @type {?} */
        var topOffset = (wrapperHeight - containerHeight) * -1;
        this._initialTopOffset = (topOffset < this.customTopOffset) ?
            topOffset :
            this.customTopOffset;
        this._wrapperElement.style.top = this._initialTopOffset + 'px';
    };
    /**
     * Watches the scroll event and adjusts the "top" CSS property of the wrapper
     * element.
     */
    /**
     * Watches the scroll event and adjusts the "top" CSS property of the wrapper
     * element.
     * @return {?}
     */
    StickySidebarComponent.prototype.addScrollListener = /**
     * Watches the scroll event and adjusts the "top" CSS property of the wrapper
     * element.
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var scrollElement = (this._containerElement === document.documentElement) ?
            window :
            this._containerElement;
        scrollElement.addEventListener('scroll', (/**
         * @return {?}
         */
        function () {
            requestAnimationFrame((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var topOffset = parseInt(_this._wrapperElement.style.top);
                /** @type {?} */
                var newScrollTop = _this._containerElement.scrollTop;
                /** @type {?} */
                var scrollDistance = newScrollTop - _this._scrollTop;
                _this._scrollDirection = (scrollDistance > 0) ? 'down' : 'up';
                _this._scrollTop = _this._containerElement.scrollTop;
                if (_this._scrollDirection === 'down') {
                    if (topOffset - scrollDistance <= _this._initialTopOffset) {
                        _this._wrapperElement.style.top = _this._initialTopOffset + 'px';
                    }
                    else {
                        _this._wrapperElement.style.top =
                            (topOffset - scrollDistance) + 'px';
                    }
                }
                else {
                    if (topOffset - scrollDistance >= _this.customTopOffset) {
                        _this._wrapperElement.style.top = _this.customTopOffset + 'px';
                    }
                    else if (newScrollTop > -_this._initialTopOffset) {
                        _this._wrapperElement.style.top = (topOffset - scrollDistance) + 'px';
                    }
                }
            }));
        }));
    };
    /**
     * Watches the window.resize event and resets sidebar.
     */
    /**
     * Watches the window.resize event and resets sidebar.
     * @return {?}
     */
    StickySidebarComponent.prototype.addResizeListener = /**
     * Watches the window.resize event and resets sidebar.
     * @return {?}
     */
    function () {
        var _this = this;
        window.addEventListener('resize', (/**
         * @return {?}
         */
        function () {
            requestAnimationFrame((/**
             * @return {?}
             */
            function () { return _this.reset(); }));
        }));
    };
    /**
     * Returns the height of an element without padding or borders.
     * @param element The element to use.
     * @param limitToViewport Whether to use the full height or limit the height
     *                        to the height of the viewport.
     */
    /**
     * Returns the height of an element without padding or borders.
     * @param {?} element The element to use.
     * @param {?=} limitToViewport Whether to use the full height or limit the height
     *                        to the height of the viewport.
     * @return {?}
     */
    StickySidebarComponent.prototype.getContentBoxHeight = /**
     * Returns the height of an element without padding or borders.
     * @param {?} element The element to use.
     * @param {?=} limitToViewport Whether to use the full height or limit the height
     *                        to the height of the viewport.
     * @return {?}
     */
    function (element, limitToViewport) {
        if (limitToViewport === void 0) { limitToViewport = false; }
        /** @type {?} */
        var styles = getComputedStyle(element);
        /** @type {?} */
        var outerHeight = (limitToViewport) ?
            element.clientHeight :
            element.offsetHeight;
        /** @type {?} */
        var padding = parseInt(styles.paddingTop) +
            parseInt(styles.paddingBottom);
        /** @type {?} */
        var borders = parseInt(styles.borderTopWidth) +
            parseInt(styles.borderBottomWidth);
        /** @type {?} */
        var innerHeight = outerHeight - padding - borders;
        return innerHeight;
    };
    StickySidebarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'raven-sticky-sidebar',
                    template: "<div #wrapper class=\"ss-wrapper\"><ng-content></ng-content></div>",
                    styles: [".ss-wrapper{position:-webkit-sticky;position:sticky;top:0}"]
                }] }
    ];
    /** @nocollapse */
    StickySidebarComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    StickySidebarComponent.propDecorators = {
        customTopOffset: [{ type: Input, args: ['topOffset',] }],
        wrapperElementRef: [{ type: ViewChild, args: ['wrapper', { static: true },] }],
        containerSelector: [{ type: Input, args: ['container',] }]
    };
    return StickySidebarComponent;
}());
export { StickySidebarComponent };
if (false) {
    /** @type {?} */
    StickySidebarComponent.prototype.customTopOffset;
    /** @type {?} */
    StickySidebarComponent.prototype.wrapperElementRef;
    /**
     * @type {?}
     * @private
     */
    StickySidebarComponent.prototype._containerElement;
    /**
     * @type {?}
     * @private
     */
    StickySidebarComponent.prototype._wrapperElement;
    /**
     * @type {?}
     * @private
     */
    StickySidebarComponent.prototype._initialTopOffset;
    /**
     * @type {?}
     * @private
     */
    StickySidebarComponent.prototype._scrollTop;
    /**
     * @type {?}
     * @private
     */
    StickySidebarComponent.prototype._scrollDirection;
    /**
     * @type {?}
     * @private
     */
    StickySidebarComponent.prototype._hostElementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RpY2t5LXNpZGViYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcmF2ZW4tc3RpY2t5LXNpZGViYXIvIiwic291cmNlcyI6WyJsaWIvc3RpY2t5LXNpZGViYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFVBQVUsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhGO0lBa0JFLGdDQUNVLGVBQTJCO1FBQTNCLG9CQUFlLEdBQWYsZUFBZSxDQUFZO1FBRW5DLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDO1FBQ2xELElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7SUFDakMsQ0FBQztJQUVELHNCQUNJLHFEQUFpQjs7Ozs7UUFEckIsVUFDc0IsS0FBYTtZQUNqQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUV2RCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3hCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNkO1FBQ0gsQ0FBQzs7O09BQUE7Ozs7SUFFRCx5Q0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsZUFBZSxHQUFHLG1CQUFnQixJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFBLENBQUM7UUFFNUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILHNDQUFLOzs7O0lBQUw7O1lBQ1EsV0FBVyxHQUFHLG1CQUFnQixJQUFJ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Ozs7OztJQUNILG9EQUFtQjs7Ozs7OztJQUFuQixVQUFvQixPQUFvQixFQUFFLGVBQXVCO1FBQXZCLGdDQUFBLEVBQUEsdUJBQXVCOztZQUN6RCxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxDQUFDOztZQUNsQyxXQUFXLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN0QixPQUFPLENBQUMsWUFBWTs7WUFDaEIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ3pDLFFBQVEsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQUMxQixPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7WUFDN0MsUUFBUSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQzs7WUFDOUIsV0FBVyxHQUFHLFdBQVcsR0FBRyxPQUFPLEdBQUcsT0FBTztRQUVuRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDOztnQkE1S0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLFFBQVEsRUFBRSxvRUFBa0U7O2lCQUU3RTs7OztnQkFOMkIsVUFBVTs7O2tDQVFuQyxLQUFLLFNBQUMsV0FBVztvQ0FHakIsU0FBUyxTQUFDLFNBQVMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7b0NBa0JyQyxLQUFLLFNBQUMsV0FBVzs7SUFrSnBCLDZCQUFDO0NBQUEsQUE3S0QsSUE2S0M7U0F4S1ksc0JBQXNCOzs7SUFDakMsaURBQ3dCOztJQUV4QixtREFDOEI7Ozs7O0lBRTlCLG1EQUF1Qzs7Ozs7SUFDdkMsaURBQXdDOzs7OztJQUN4QyxtREFBa0M7Ozs7O0lBQ2xDLDRDQUEyQjs7Ozs7SUFDM0Isa0RBQXVDOzs7OztJQUdyQyxpREFBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdyYXZlbi1zdGlja3ktc2lkZWJhcicsXG4gIHRlbXBsYXRlOiBgPGRpdiAjd3JhcHBlciBjbGFzcz1cInNzLXdyYXBwZXJcIj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9kaXY+YCxcbiAgc3R5bGVVcmxzOiBbJ3N0aWNreS1zaWRlYmFyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTdGlja3lTaWRlYmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCd0b3BPZmZzZXQnKVxuICBjdXN0b21Ub3BPZmZzZXQ6IG51bWJlcjtcblxuICBAVmlld0NoaWxkKCd3cmFwcGVyJywgeyBzdGF0aWM6IHRydWUgfSlcbiAgd3JhcHBlckVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG5cbiAgcHJpdmF0ZSBfY29udGFpbmVyRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgX3dyYXBwZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcbiAgcHJpdmF0ZSBfaW5pdGlhbFRvcE9mZnNldDogbnVtYmVyO1xuICBwcml2YXRlIF9zY3JvbGxUb3A6IG51bWJlcjtcbiAgcHJpdmF0ZSBfc2Nyb2xsRGlyZWN0aW9uOiAndXAnIHwgJ2Rvd24nXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBfaG9zdEVsZW1lbnRSZWY6IEVsZW1lbnRSZWZcbiAgKSB7XG4gICAgdGhpcy5jdXN0b21Ub3BPZmZzZXQgPSAwO1xuICAgIHRoaXMuX2NvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdGhpcy5fc2Nyb2xsVG9wID0gMDtcbiAgICB0aGlzLl9zY3JvbGxEaXJlY3Rpb24gPSAnZG93bic7XG4gIH1cblxuICBASW5wdXQoJ2NvbnRhaW5lcicpXG4gIHNldCBjb250YWluZXJTZWxlY3Rvcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fY29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodmFsdWUpO1xuXG4gICAgaWYgKHRoaXMuX3dyYXBwZXJFbGVtZW50KSB7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5fd3JhcHBlckVsZW1lbnQgPSA8SFRNTERpdkVsZW1lbnQ+dGhpcy53cmFwcGVyRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuXG4gICAgdGhpcy5yZXNldCgpO1xuICAgIHRoaXMuYWRkU2Nyb2xsTGlzdGVuZXIoKTtcbiAgICB0aGlzLmFkZFJlc2l6ZUxpc3RlbmVyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHNpZGViYXIgYmFzZWQgb24gY3VycmVudCBjb25kaXRpb25zLlxuICAgKi9cbiAgcmVzZXQoKSB7XG4gICAgY29uc3QgaG9zdEVsZW1lbnQgPSA8SFRNTERpdkVsZW1lbnQ+dGhpcy5faG9zdEVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuICAgIGhvc3RFbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9ICcwJztcblxuICAgIHRoaXMuc2V0U2lkZWJhckhlaWdodCgpO1xuICAgIHRoaXMuaW5pdFRvcE9mZnNldCgpO1xuXG4gICAgdGhpcy5fc2Nyb2xsVG9wID0gdGhpcy5fY29udGFpbmVyRWxlbWVudC5zY3JvbGxUb3A7XG4gIH1cblxuICAvKipcbiAgICogRW5zdXJlcyB0aGUgbWluaW11bSBoZWlnaHQgb2YgdGhlIHNpZGViYXIgaXMgdGhlIHNhbWUgYXMgdGhlIGNvbnRhaW5lclxuICAgKiB3aGVuIGZsb2F0cyBhcmUgdXNlZC5cbiAgICovXG4gIHNldFNpZGViYXJIZWlnaHQoaGVpZ2h0PzogbnVtYmVyKSB7XG4gICAgY29uc3QgaG9zdEVsZW1lbnQgPSA8SFRNTERpdkVsZW1lbnQ+dGhpcy5faG9zdEVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcblxuICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKGhvc3RFbGVtZW50KS5jc3NGbG9hdCA9PT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNvbnRhaW5lckhlaWdodDogbnVtYmVyO1xuXG4gICAgaWYgKGhlaWdodCkge1xuICAgICAgY29udGFpbmVySGVpZ2h0ID0gaGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250YWluZXJIZWlnaHQgPSAodGhpcy5fY29udGFpbmVyRWxlbWVudCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSA/XG4gICAgICAgIGhvc3RFbGVtZW50LnBhcmVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0IDpcbiAgICAgICAgdGhpcy5nZXRDb250ZW50Qm94SGVpZ2h0KHRoaXMuX2NvbnRhaW5lckVsZW1lbnQpO1xuICAgIH1cblxuICAgIGhvc3RFbGVtZW50LnN0eWxlLm1pbkhlaWdodCA9IGNvbnRhaW5lckhlaWdodCArICdweCc7XG5cbiAgICBpZiAodGhpcy5fY29udGFpbmVyRWxlbWVudCAhPT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAvLyBIZWlnaHQgY2hhbmdlIG1heSBoYXZlIGNoYW5nZWQgY29udGFpbmVyIGhlaWdodFxuICAgICAgY29uc3QgbmV3Q29udGFpbmVySGVpZ2h0ID0gdGhpcy5nZXRDb250ZW50Qm94SGVpZ2h0KHRoaXMuX2NvbnRhaW5lckVsZW1lbnQpO1xuXG4gICAgICBpZiAoaG9zdEVsZW1lbnQub2Zmc2V0SGVpZ2h0IDwgbmV3Q29udGFpbmVySGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuc2V0U2lkZWJhckhlaWdodChuZXdDb250YWluZXJIZWlnaHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgXCJ0b3BcIiBDU1MgcHJvcGVydHkgb2YgdGhlIHdyYXBwZXIgZWxlbWVudC5cbiAgICovXG4gIGluaXRUb3BPZmZzZXQoKSB7XG4gICAgLy8gTWVhc3VyZSBjb250YWluZXIgYW5kIHdyYXBwZXIgaGVpZ2h0XG4gICAgY29uc3QgY29udGFpbmVySGVpZ2h0ID0gdGhpcy5nZXRDb250ZW50Qm94SGVpZ2h0KHRoaXMuX2NvbnRhaW5lckVsZW1lbnQsIHRydWUpO1xuICAgIGNvbnN0IHdyYXBwZXJIZWlnaHQgPSB0aGlzLl93cmFwcGVyRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG5cbiAgICAvLyBTZXQgdG9wIG9mZnNldFxuICAgIGNvbnN0IHRvcE9mZnNldCA9ICh3cmFwcGVySGVpZ2h0IC0gY29udGFpbmVySGVpZ2h0KSAqIC0xO1xuXG4gICAgdGhpcy5faW5pdGlhbFRvcE9mZnNldCA9ICh0b3BPZmZzZXQgPCB0aGlzLmN1c3RvbVRvcE9mZnNldCkgP1xuICAgICAgdG9wT2Zmc2V0IDpcbiAgICAgIHRoaXMuY3VzdG9tVG9wT2Zmc2V0O1xuICAgIHRoaXMuX3dyYXBwZXJFbGVtZW50LnN0eWxlLnRvcCA9IHRoaXMuX2luaXRpYWxUb3BPZmZzZXQgKyAncHgnO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhdGNoZXMgdGhlIHNjcm9sbCBldmVudCBhbmQgYWRqdXN0cyB0aGUgXCJ0b3BcIiBDU1MgcHJvcGVydHkgb2YgdGhlIHdyYXBwZXJcbiAgICogZWxlbWVudC5cbiAgICovXG4gIGFkZFNjcm9sbExpc3RlbmVyKCkge1xuICAgIGNvbnN0IHNjcm9sbEVsZW1lbnQgPSAodGhpcy5fY29udGFpbmVyRWxlbWVudCA9PT0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSA/XG4gICAgICB3aW5kb3cgOlxuICAgICAgdGhpcy5fY29udGFpbmVyRWxlbWVudDtcblxuICAgIHNjcm9sbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4ge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgY29uc3QgdG9wT2Zmc2V0ID0gcGFyc2VJbnQodGhpcy5fd3JhcHBlckVsZW1lbnQuc3R5bGUudG9wKTtcblxuICAgICAgICBjb25zdCBuZXdTY3JvbGxUb3AgPSB0aGlzLl9jb250YWluZXJFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgY29uc3Qgc2Nyb2xsRGlzdGFuY2UgPSBuZXdTY3JvbGxUb3AgLSB0aGlzLl9zY3JvbGxUb3A7XG5cbiAgICAgICAgdGhpcy5fc2Nyb2xsRGlyZWN0aW9uID0gKHNjcm9sbERpc3RhbmNlID4gMCkgPyAnZG93bicgOiAndXAnO1xuICAgICAgICB0aGlzLl9zY3JvbGxUb3AgPSB0aGlzLl9jb250YWluZXJFbGVtZW50LnNjcm9sbFRvcDtcblxuICAgICAgICBpZiAodGhpcy5fc2Nyb2xsRGlyZWN0aW9uID09PSAnZG93bicpIHtcbiAgICAgICAgICBpZiAodG9wT2Zmc2V0IC0gc2Nyb2xsRGlzdGFuY2UgPD0gdGhpcy5faW5pdGlhbFRvcE9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5fd3JhcHBlckVsZW1lbnQuc3R5bGUudG9wID0gdGhpcy5faW5pdGlhbFRvcE9mZnNldCArICdweCc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3dyYXBwZXJFbGVtZW50LnN0eWxlLnRvcCA9XG4gICAgICAgICAgICAgICh0b3BPZmZzZXQgLSBzY3JvbGxEaXN0YW5jZSkgKyAncHgnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodG9wT2Zmc2V0IC0gc2Nyb2xsRGlzdGFuY2UgPj0gdGhpcy5jdXN0b21Ub3BPZmZzZXQpIHtcbiAgICAgICAgICAgIHRoaXMuX3dyYXBwZXJFbGVtZW50LnN0eWxlLnRvcCA9IHRoaXMuY3VzdG9tVG9wT2Zmc2V0ICsgJ3B4JztcbiAgICAgICAgICB9IGVsc2UgaWYgKG5ld1Njcm9sbFRvcCA+IC10aGlzLl9pbml0aWFsVG9wT2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLl93cmFwcGVyRWxlbWVudC5zdHlsZS50b3AgPSAodG9wT2Zmc2V0IC0gc2Nyb2xsRGlzdGFuY2UpICsgJ3B4JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFdhdGNoZXMgdGhlIHdpbmRvdy5yZXNpemUgZXZlbnQgYW5kIHJlc2V0cyBzaWRlYmFyLlxuICAgKi9cbiAgYWRkUmVzaXplTGlzdGVuZXIoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnJlc2V0KCkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGhlaWdodCBvZiBhbiBlbGVtZW50IHdpdGhvdXQgcGFkZGluZyBvciBib3JkZXJzLlxuICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCB0byB1c2UuXG4gICAqIEBwYXJhbSBsaW1pdFRvVmlld3BvcnQgV2hldGhlciB0byB1c2UgdGhlIGZ1bGwgaGVpZ2h0IG9yIGxpbWl0IHRoZSBoZWlnaHRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydC5cbiAgICovXG4gIGdldENvbnRlbnRCb3hIZWlnaHQoZWxlbWVudDogSFRNTEVsZW1lbnQsIGxpbWl0VG9WaWV3cG9ydCA9IGZhbHNlKTogbnVtYmVyIHtcbiAgICBjb25zdCBzdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGNvbnN0IG91dGVySGVpZ2h0ID0gKGxpbWl0VG9WaWV3cG9ydCkgP1xuICAgICAgZWxlbWVudC5jbGllbnRIZWlnaHQgOlxuICAgICAgZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgY29uc3QgcGFkZGluZyA9IHBhcnNlSW50KHN0eWxlcy5wYWRkaW5nVG9wKSArXG4gICAgICBwYXJzZUludChzdHlsZXMucGFkZGluZ0JvdHRvbSk7XG4gICAgY29uc3QgYm9yZGVycyA9IHBhcnNlSW50KHN0eWxlcy5ib3JkZXJUb3BXaWR0aCkgK1xuICAgICAgcGFyc2VJbnQoc3R5bGVzLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICBjb25zdCBpbm5lckhlaWdodCA9IG91dGVySGVpZ2h0IC0gcGFkZGluZyAtIGJvcmRlcnM7XG5cbiAgICByZXR1cm4gaW5uZXJIZWlnaHQ7XG4gIH1cbn1cbiJdfQ==