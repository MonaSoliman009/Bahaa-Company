{"version":3,"file":"sticky-sidebar.component.d.ts","sources":["sticky-sidebar.component.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, ElementRef } from '@angular/core';\r\nexport declare class StickySidebarComponent implements OnInit {\r\n    private _hostElementRef;\r\n    customTopOffset: number;\r\n    wrapperElementRef: ElementRef;\r\n    private _containerElement;\r\n    private _wrapperElement;\r\n    private _initialTopOffset;\r\n    private _scrollTop;\r\n    private _scrollDirection;\r\n    constructor(_hostElementRef: ElementRef);\r\n    containerSelector: string;\r\n    ngOnInit(): void;\r\n    /**\r\n     * Resets sidebar based on current conditions.\r\n     */\r\n    reset(): void;\r\n    /**\r\n     * Ensures the minimum height of the sidebar is the same as the container\r\n     * when floats are used.\r\n     */\r\n    setSidebarHeight(height?: number): void;\r\n    /**\r\n     * Initializes the \"top\" CSS property of the wrapper element.\r\n     */\r\n    initTopOffset(): void;\r\n    /**\r\n     * Watches the scroll event and adjusts the \"top\" CSS property of the wrapper\r\n     * element.\r\n     */\r\n    addScrollListener(): void;\r\n    /**\r\n     * Watches the window.resize event and resets sidebar.\r\n     */\r\n    addResizeListener(): void;\r\n    /**\r\n     * Returns the height of an element without padding or borders.\r\n     * @param element The element to use.\r\n     * @param limitToViewport Whether to use the full height or limit the height\r\n     *                        to the height of the viewport.\r\n     */\r\n    getContentBoxHeight(element: HTMLElement, limitToViewport?: boolean): number;\r\n}\r\n"]}