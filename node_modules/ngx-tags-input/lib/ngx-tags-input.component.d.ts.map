{"version":3,"file":"ngx-tags-input.component.d.ts","sources":["ngx-tags-input.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead/public_api';\r\nexport interface TagsChangedEvent {\r\n    change: string;\r\n    tag: any;\r\n}\r\nexport declare class NgxTagsInputComponent implements ControlValueAccessor {\r\n    selected: string;\r\n    tags: Array<any>;\r\n    private onTouchedCallback;\r\n    private onChangeCallback;\r\n    maxTags: number;\r\n    removeLastOnBackspace: boolean;\r\n    canDeleteTags: boolean;\r\n    canAddTags: boolean;\r\n    placeholder: string;\r\n    options: any;\r\n    displayField: string;\r\n    minLengthBeforeOptions: number;\r\n    scrollableOptions: boolean;\r\n    scrollableOptionsInView: number;\r\n    onTagsChanged: EventEmitter<TagsChangedEvent>;\r\n    onMaxTagsReached: EventEmitter<void>;\r\n    onNoOptionsMatch: EventEmitter<boolean>;\r\n    getPlaceholder(): string;\r\n    private tagsChanged;\r\n    removeLastTag(tagInput: HTMLInputElement): void;\r\n    addTag(tagInput: HTMLInputElement): void;\r\n    private addPredefinedTag;\r\n    removeTag(tagToRemove: any): void;\r\n    maximumOfTagsReached(): boolean;\r\n    isDeleteable(tag: any): boolean;\r\n    typeaheadOnSelect(e: TypeaheadMatch): void;\r\n    typeaheadOnNoMatch(e: any): void;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n}\r\n"]}