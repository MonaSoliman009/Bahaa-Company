{"version":3,"file":"autocomplete.component.d.ts","sources":["autocomplete.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nexport declare class AutocompleteComponent implements OnInit, OnChanges, AfterViewInit, ControlValueAccessor {\r\n    private renderer;\r\n    searchInput: ElementRef;\r\n    filteredListElement: ElementRef;\r\n    historyListElement: ElementRef;\r\n    inputKeyUp$: Observable<any>;\r\n    inputKeyDown$: Observable<any>;\r\n    query: string;\r\n    filteredList: any[];\r\n    historyList: any[];\r\n    isHistoryListVisible: boolean;\r\n    elementRef: any;\r\n    selectedIdx: number;\r\n    toHighlight: string;\r\n    notFound: boolean;\r\n    isFocused: boolean;\r\n    isOpen: boolean;\r\n    isScrollToEnd: boolean;\r\n    overlay: boolean;\r\n    private manualOpen;\r\n    private manualClose;\r\n    /**\r\n     * Data of items list.\r\n     * It can be array of strings or array of objects.\r\n     */\r\n    data: any[];\r\n    searchKeyword: string;\r\n    placeholder: string;\r\n    heading: string;\r\n    initialValue: any;\r\n    /**\r\n     * History identifier of history list\r\n     * When valid history identifier is given, then component stores selected item to local storage of user's browser.\r\n     * If it is null then history is hidden.\r\n     * History list is visible if at least one history item is stored.\r\n     */\r\n    historyIdentifier: string;\r\n    /**\r\n     * Heading text of history list.\r\n     * If it is null then history heading is hidden.\r\n     */\r\n    historyHeading: string;\r\n    historyListMaxNumber: number;\r\n    notFoundText: string;\r\n    isLoading: boolean;\r\n    debounceTime: number;\r\n    disabled: boolean;\r\n    /**\r\n     * The minimum number of characters the user must type before a search is performed.\r\n     */\r\n    minQueryLength: number;\r\n    /**\r\n     * Focus first item in the list\r\n     */\r\n    focusFirst: boolean;\r\n    /**\r\n     * Custom filter function\r\n     */\r\n    customFilter: (items: any[], query: string) => any[];\r\n    /** Event that is emitted whenever an item from the list is selected. */\r\n    selected: EventEmitter<any>;\r\n    /** Event that is emitted whenever an input is changed. */\r\n    inputChanged: EventEmitter<any>;\r\n    /** Event that is emitted whenever an input is focused. */\r\n    readonly inputFocused: EventEmitter<void>;\r\n    /** Event that is emitted whenever an input is cleared. */\r\n    readonly inputCleared: EventEmitter<void>;\r\n    /** Event that is emitted when the autocomplete panel is opened. */\r\n    readonly opened: EventEmitter<void>;\r\n    /** Event that is emitted when the autocomplete panel is closed. */\r\n    readonly closed: EventEmitter<void>;\r\n    /** Event that is emitted when scrolled to the end of items. */\r\n    readonly scrolledToEnd: EventEmitter<void>;\r\n    itemTemplate: TemplateRef<any>;\r\n    notFoundTemplate: TemplateRef<any>;\r\n    customTemplate: TemplateRef<any>;\r\n    /**\r\n     * Propagates new value when model changes\r\n     */\r\n    propagateChange: any;\r\n    onTouched: any;\r\n    /**\r\n     * Writes a new value from the form model into the view,\r\n     * Updates model\r\n     */\r\n    writeValue(value?: any): void;\r\n    /**\r\n     * Registers a handler that is called when something in the view has changed\r\n     */\r\n    registerOnChange(fn: any): void;\r\n    /**\r\n     * Registers a handler specifically for when a control receives a touch event\r\n     */\r\n    registerOnTouched(fn: () => void): void;\r\n    /**\r\n     * Event that is called when the value of an input element is changed\r\n     */\r\n    onChange(event: any): void;\r\n    constructor(elementRef: ElementRef, renderer: Renderer2);\r\n    /**\r\n     * Event that is called when the control status changes to or from DISABLED\r\n     */\r\n    setDisabledState(isDisabled: boolean): void;\r\n    ngOnInit(): void;\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * Set initial value\r\n     * @param value\r\n     */\r\n    setInitialValue(value: any): void;\r\n    /**\r\n     * Update search results\r\n     */\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    /**\r\n     * Items change\r\n     */\r\n    handleItemsChange(): void;\r\n    /**\r\n     * Filter data\r\n     */\r\n    filterList(): void;\r\n    /**\r\n     * Default filter function, used unless customFilter is provided\r\n     */\r\n    defaultFilterFunction(): any[];\r\n    /**\r\n     * Check if item is a string in the list.\r\n     * @param item\r\n     */\r\n    isTypeString(item: any): boolean;\r\n    /**\r\n     * Select item in the list.\r\n     * @param item\r\n     */\r\n    select(item: any): void;\r\n    /**\r\n     * Document click\r\n     * @param e event\r\n     */\r\n    handleClick(e: any): void;\r\n    /**\r\n     * Handle body overlay\r\n     */\r\n    handleOverlay(): void;\r\n    /**\r\n     * Scroll items\r\n     */\r\n    handleScroll(): void;\r\n    /**\r\n     * Define panel state\r\n     */\r\n    setPanelState(event: any): void;\r\n    /**\r\n     * Manual controls\r\n     */\r\n    open(): void;\r\n    close(): void;\r\n    focus(): void;\r\n    clear(): void;\r\n    /**\r\n     * Remove search query\r\n     */\r\n    remove(e: any): void;\r\n    /**\r\n     * Initialize historyList search\r\n     */\r\n    initSearchHistory(): void;\r\n    handleOpen(): void;\r\n    handleClose(): void;\r\n    handleFocus(e: any): void;\r\n    scrollToEnd(): void;\r\n    /**\r\n     * Initialize keyboard events\r\n     */\r\n    initEventStream(): void;\r\n    /**\r\n     * Listen keyboard events\r\n     */\r\n    listenEventStream(): void;\r\n    /**\r\n     * on keyup == when input changed\r\n     * @param e event\r\n     */\r\n    onKeyUp(e: any): void;\r\n    /**\r\n     * Keyboard arrow top and arrow bottom\r\n     * @param e event\r\n     */\r\n    onFocusItem(e: any): void;\r\n    /**\r\n     * Scroll to focused item\r\n     * * @param index\r\n     */\r\n    scrollToFocusedItem(index: any): void;\r\n    /**\r\n     * Select item on enter click\r\n     */\r\n    onHandleEnter(): void;\r\n    /**\r\n     * Esc click\r\n     */\r\n    onEsc(): void;\r\n    /**\r\n     * Tab click\r\n     */\r\n    onTab(): void;\r\n    /**\r\n     * Delete click\r\n     */\r\n    onDelete(): void;\r\n    /**\r\n     * Select item to save in localStorage\r\n     * @param selected\r\n     */\r\n    saveHistory(selected: any): void;\r\n    /**\r\n     * Save item in localStorage\r\n     * @param selected\r\n     */\r\n    saveHistoryToLocalStorage(selected: any): void;\r\n    /**\r\n     * Remove item from localStorage\r\n     * @param index\r\n     * @param e event\r\n     */\r\n    removeHistoryItem(index: any, e: any): void;\r\n    /**\r\n     * Reset localStorage\r\n     * @param e event\r\n     */\r\n    resetHistoryList(e: any): void;\r\n}\r\n"]}