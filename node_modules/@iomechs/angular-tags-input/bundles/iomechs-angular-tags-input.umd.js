(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/overlay'), require('@angular/forms'), require('rxjs/operators'), require('@angular/cdk/a11y'), require('@angular/cdk/keycodes'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@iomechs/angular-tags-input', ['exports', '@angular/core', '@angular/cdk/overlay', '@angular/forms', 'rxjs/operators', '@angular/cdk/a11y', '@angular/cdk/keycodes', '@angular/common'], factory) :
    (global = global || self, factory((global.iomechs = global.iomechs || {}, global.iomechs['angular-tags-input'] = {}), global.ng.core, global.ng.cdk.overlay, global.ng.forms, global.rxjs.operators, global.ng.cdk.a11y, global.ng.cdk.keycodes, global.ng.common));
}(this, (function (exports, core, overlay, forms, operators, a11y, keycodes, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var UnAddedTagsPipe = /** @class */ (function () {
        function UnAddedTagsPipe() {
        }
        UnAddedTagsPipe.prototype.transform = function (tagsList, args) {
            var _this = this;
            var result = [];
            var tagsAdded = args.tagsAdded, config = args.config;
            // if the tagsList is falsy, return empty list
            if (!tagsList) {
                return [];
            }
            // if we have to show selected tags (adds selected: true to every item (or nested tag))
            if (config.showTagsSelectedInDD) {
                tagsList = this.setSelectedTags(tagsList, config, tagsAdded);
            }
            // if we don't have to hide tags, send the tagsList (final, processed) back
            if (!config.hideAddedTags) {
                return tagsList;
            }
            /**
             * if we have to filter out the already selected tags in the dropdown, we'll filter these out
             * and thus the already selected tags won't go back in the results for dropdown
             */
            for (var i = 0, len = tagsList.length; i < len; ++i) {
                var currentTagItem = __assign({}, tagsList[i]); // making sure we're not modifying the original object here
                if (!this.isTagAlreadySelected(currentTagItem, tagsAdded, config)) { // if the tag to add isn't added already
                    currentTagItem.tiSelected = false;
                    if (config.nestedTagProperty && currentTagItem[config.nestedTagProperty]) {
                        currentTagItem[config.nestedTagProperty] = currentTagItem[config.nestedTagProperty].filter(function (tagItem) {
                            return !_this.isTagAlreadySelected(tagItem, tagsAdded, config);
                        });
                    }
                    result.push(currentTagItem);
                }
            }
            return result;
        };
        /**
         * @author Ahsan Ayaz
         * @desc Compares a tag against all the tags added based on config provided
         * @param currentTag - the tag to check if it exists in the selection
         * @param tagsAdded - an array of the tags added to the selection
         * @param config - the config provided to the Angular Tags Input component
         * @return boolean - if the tag is added already
         */
        UnAddedTagsPipe.prototype.isTagAlreadySelected = function (currentTag, tagsAdded, config) {
            var _this = this;
            return tagsAdded.find(function (tagItem) {
                var matchFound = false;
                matchFound = _this.areTagsMatching(currentTag, tagItem, config);
                if (matchFound) {
                    return true;
                }
                else if (tagItem[config.nestedTagProperty]) {
                    return _this.isTagAlreadySelected(currentTag, tagItem[config.nestedTagProperty], config);
                }
                return false;
            });
        };
        /**
         * @author Ahsan Ayaz
         * @desc Compares the two tags based on the identifier provided in the config
         * @param currentTag - the tag in the iteration to compare
         * @param tagItem - the tag (already selected) to compare with
         * @param config - the config provided to the Angular Tags Input component
         * @return boolean - if the tags passed are the same.
         */
        UnAddedTagsPipe.prototype.areTagsMatching = function (currentTag, tagItem, config) {
            if (typeof tagItem[config.identifier] === 'number') {
                // handling if the type of identifier is a number
                return tagItem[config.identifier] === +currentTag[config.identifier];
            }
            else if (typeof tagItem[config.identifier] === 'string' && typeof currentTag[config.identifier] === 'string') {
                // handling if the type of identifier is a string
                return tagItem[config.identifier].toLowerCase() === currentTag[config.identifier].toLowerCase();
            }
        };
        UnAddedTagsPipe.prototype.setSelectedTags = function (tags, config, tagsAdded, isSelected) {
            var _this = this;
            if (isSelected === void 0) { isSelected = null; }
            return tags.map(function (currentTag) {
                currentTag.tiSelected = !!_this.isTagAlreadySelected(currentTag, tagsAdded, config);
                if (config.showTagsSelectedInDD && !!isSelected) {
                    currentTag.tiSelected = true;
                }
                if (currentTag[config.nestedTagProperty] && currentTag[config.nestedTagProperty].length) {
                    currentTag[config.nestedTagProperty] = _this.setSelectedTags(currentTag[config.nestedTagProperty], config, tagsAdded, currentTag.tiSelected);
                }
                return currentTag;
            });
        };
        UnAddedTagsPipe = __decorate([
            core.Pipe({
                name: 'unAddedTags'
            })
        ], UnAddedTagsPipe);
        return UnAddedTagsPipe;
    }());

    var AngularTagsInputService = /** @class */ (function () {
        function AngularTagsInputService() {
            this.debugMode = false;
        }
        /**
         * @author Ahsan Ayaz
         * @desc Finds a tag by Id
         * @param tagsData Array of the tags (could be heirarchical)
         * @param tagId identifier of the tag to be found
         * @param config the tags input config
         * @returns the tag found, or `undefined`
         */
        AngularTagsInputService.prototype.findTagById = function (tagsData, tagId, config) {
            for (var i = 0, len = tagsData.length; i < len; ++i) {
                // tslint:disable-next-line:triple-equals
                if (tagsData[i][config.identifier] == tagId) {
                    return tagsData[i];
                }
                if (tagsData[i][config.nestedTagProperty]) {
                    var nestedParentFound = this.findTagById(tagsData[i][config.nestedTagProperty], tagId, config);
                    if (nestedParentFound) {
                        return nestedParentFound;
                    }
                }
            }
        };
        AngularTagsInputService.prototype.setDebugMode = function (mode) {
            this.debugMode = mode;
        };
        AngularTagsInputService.prototype.log = function (logMessage, logLabel) {
            if (logLabel === void 0) { logLabel = ''; }
            if (!this.debugMode) {
                return;
            }
            console.log(logLabel, logMessage);
        };
        AngularTagsInputService.prototype.findParent = function (tagsArray, tagItem, config) {
            for (var i = 0, len = tagsArray.length; i < len; ++i) {
                // tslint:disable-next-line:triple-equals
                if (tagsArray[i][config.identifier] == tagItem[config.identifier]) {
                    return tagsArray[i];
                }
                if (tagsArray[i][config.nestedTagProperty]) {
                    var nestedParentFound = this.findParent(tagsArray[i][config.nestedTagProperty], tagItem, config);
                    if (nestedParentFound) {
                        return nestedParentFound;
                    }
                }
            }
        };
        AngularTagsInputService.prototype.getMainTagAfterAdding = function (tagsArray, tagAdded, tags, config) {
            if (tagAdded[config.nestedTagParentProp]) {
                var parentTag = this.findTagById(tagsArray, tagAdded[config.nestedTagParentProp], config);
                if (!parentTag) {
                    return;
                }
                var parentTagChildren = parentTag[config.nestedTagProperty].length;
                var childrensSelected = parentTag[config.nestedTagProperty].filter(function (tagItem) {
                    // tslint:disable-next-line:triple-equals
                    return !!tagItem.tiSelected;
                }).length;
                if (parentTagChildren > 0 && childrensSelected > 0 && childrensSelected === parentTagChildren) {
                    parentTag.tiSelected = true;
                    if (!parentTag[config.nestedTagParentProp]) {
                        return parentTag;
                    }
                    else {
                        return this.getMainTagAfterAdding(tagsArray, parentTag, tags, config);
                    }
                }
            }
            return tagAdded;
        };
        AngularTagsInputService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AngularTagsInputService_Factory() { return new AngularTagsInputService(); }, token: AngularTagsInputService, providedIn: "root" });
        AngularTagsInputService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], AngularTagsInputService);
        return AngularTagsInputService;
    }());

    var TagInputComponent = /** @class */ (function () {
        function TagInputComponent() {
            this.inputClass = 'default';
            this.disabled = false;
            this.valueChanged = new core.EventEmitter();
            this.inputFocused = new core.EventEmitter();
            this.inputBlurred = new core.EventEmitter();
            this.tagEntered = new core.EventEmitter();
            this.tagInputForm = new forms.FormGroup({
                tagInputVal: new forms.FormControl('')
            });
        }
        TagInputComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.tagInputForm.get('tagInputVal')
                .valueChanges
                .pipe(operators.debounceTime(400), operators.distinctUntilChanged())
                .subscribe(function (value) {
                _this.lastValueEmitted = value;
                _this.valueChanged.emit(value);
            });
        };
        TagInputComponent.prototype.ngOnChanges = function (changes) {
            if (changes.disabled !== undefined) {
                if (changes.disabled.currentValue === true) {
                    this.tagInputForm.get('tagInputVal').disable();
                }
                else {
                    this.tagInputForm.get('tagInputVal').enable();
                }
            }
        };
        /**
         * @author Ahsan Ayaz
         * @desc Emits the input focused event with the current search term value
         */
        TagInputComponent.prototype.emitInputFocused = function () {
            if (this.disabled) {
                return;
            }
            var searchTerm = this.tagInputForm.get('tagInputVal').value;
            this.inputFocused.emit(searchTerm);
            if (this.lastValueEmitted !== searchTerm) {
                this.valueChanged.emit(searchTerm);
                this.lastValueEmitted = searchTerm;
            }
        };
        /**
         * @author Ahsan Ayaz
         * @desc When the user presses enter key after entering the tag name
         * @param inputEl - Reference to the input element so we can fetch the value
         */
        TagInputComponent.prototype.onEnterKeyPress = function () {
            var _a;
            if (this.config.onlyFromAutoComplete) {
                return;
            }
            var tagName = this.inputEl.nativeElement.value;
            this.tagEntered.emit((_a = {},
                _a[this.config.displayProperty] = tagName,
                _a[this.config.identifier] = tagName.toLowerCase(),
                _a.newTag = true,
                _a));
            this.resetInput();
        };
        /**
         * @author Ahsan Ayaz
         * @desc Resets the input value
         */
        TagInputComponent.prototype.resetInput = function () {
            this.inputEl.nativeElement.value = '';
        };
        TagInputComponent.prototype.emitInputBlurred = function ($event) {
            this.inputBlurred.emit($event);
        };
        __decorate([
            core.Input()
        ], TagInputComponent.prototype, "inputClass", void 0);
        __decorate([
            core.Input()
        ], TagInputComponent.prototype, "config", void 0);
        __decorate([
            core.Input()
        ], TagInputComponent.prototype, "disabled", void 0);
        __decorate([
            core.Output()
        ], TagInputComponent.prototype, "valueChanged", void 0);
        __decorate([
            core.Output()
        ], TagInputComponent.prototype, "inputFocused", void 0);
        __decorate([
            core.Output()
        ], TagInputComponent.prototype, "inputBlurred", void 0);
        __decorate([
            core.Output()
        ], TagInputComponent.prototype, "tagEntered", void 0);
        __decorate([
            core.ViewChild('inputEl', { static: true })
        ], TagInputComponent.prototype, "inputEl", void 0);
        TagInputComponent = __decorate([
            core.Component({
                selector: 'ti-tag-input',
                template: "<div class=\"angular-tag-input\" [ngClass]=\"inputClass + ''\">\n  <form no-validate [formGroup]=\"tagInputForm\">\n    <input\n      #inputEl\n      [disabled]=\"disabled\"\n      (keyup.enter)=\"onEnterKeyPress()\"\n      [placeholder]=\"config?.placeholder\"\n      formControlName=\"tagInputVal\"\n      (click)=\"emitInputFocused()\"\n      (focus)=\"emitInputFocused()\"\n      (blur)=\"emitInputBlurred($event)\"\n      class=\"angular-tag-input__input\"\n      autocomplete=\"off\">\n  </form>\n</div>\n",
                styles: [".default .angular-tag-input__input{padding:6px 10px;border:none;width:98%;min-width:100px}.angular-tag-input input:focus{outline-width:0}"]
            })
        ], TagInputComponent);
        return TagInputComponent;
    }());

    var KEY_CODES = {
        ARROW_DOWN: 'ArrowDown',
        ARROW_UP: 'ArrowUp',
        ENTER: 'Enter',
        ESCAPE: 'Escape',
        TAB: 'Tab'
    };

    var DropdownItemsFilterPipe = /** @class */ (function () {
        function DropdownItemsFilterPipe() {
        }
        DropdownItemsFilterPipe.prototype.transform = function (tagItems, config, searchTerm) {
            var _this = this;
            if (tagItems === void 0) { tagItems = []; }
            if (searchTerm === void 0) { searchTerm = ''; }
            if (!searchTerm) {
                return tagItems;
            }
            return __spread(tagItems).map(function (item) { return _this.getFilteredItem(__assign({}, item), config, searchTerm); })
                .filter(function (item) { return !!item; });
        };
        DropdownItemsFilterPipe.prototype.getFilteredItem = function (item, config, searchTerm) {
            var _a;
            var _this = this;
            if (searchTerm === void 0) { searchTerm = ''; }
            if (searchTerm === '') {
                return item;
            }
            var matches = false;
            if (item[config.displayProperty].toLowerCase().includes(searchTerm.toLowerCase())) {
                return item;
            }
            if (item[config.nestedTagProperty]) {
                var childItems = item[config.nestedTagProperty].map(function (nestedItem) {
                    return _this.getFilteredItem(nestedItem, config, searchTerm);
                }).filter(function (nestedItem) { return !!nestedItem; });
                matches = childItems.length > 0;
                if (matches) {
                    return __assign({}, item, (_a = {}, _a[config.nestedTagProperty] = __spread(childItems), _a));
                }
            }
            return null;
        };
        DropdownItemsFilterPipe = __decorate([
            core.Pipe({
                name: 'dropdownItemsFilter'
            })
        ], DropdownItemsFilterPipe);
        return DropdownItemsFilterPipe;
    }());

    var DropdownComponent = /** @class */ (function () {
        function DropdownComponent(tagsInputService) {
            this.tagsInputService = tagsInputService;
            this.listItems = [];
            this.inputVal = '';
            this.itemAdded = new core.EventEmitter();
            this.itemClicked = new core.EventEmitter();
            this.dropdownItemsFilter = new DropdownItemsFilterPipe();
            this.identifierSeparator = '__';
            this.itemsMap = new Map();
        }
        DropdownComponent.prototype.ngOnInit = function () {
            if (!this.dropDownTemplate) {
                // if there's no template provided, assign the default one
                this.dropDownTemplate = this.defaultTagOptionTemplate;
            }
            this.context = {
                items: __spread(this.listItems),
                config: this.config,
                tagsLoading: this.tagsLoading,
                fns: {
                    onItemClicked: this.onItemClicked.bind(this)
                }
            };
            this.keyboardEventsManager = new a11y.ListKeyManager(__spread(this.listItems));
            this.populateItemsMap(this.listItems);
            this.ddIdPrefix = this.getRandomString();
            this.tagsInputService.log(this.itemsMap, 'items populated initially');
        };
        DropdownComponent.prototype.ngOnChanges = function (changes) {
            if (changes.listItems && !changes.listItems.firstChange) {
                // if the list items change, update the context items (because they're not automatically updated)
                this.filterItems(this.inputVal, changes.listItems.currentValue);
                this.populateItemsMap(changes.listItems ? changes.listItems.currentValue : this.listItems);
            }
            if (changes.inputVal && !changes.inputVal.firstChange) {
                // if the list items change, update the context items (because they're not automatically updated)
                this.filterItems(changes.inputVal.currentValue);
                this.populateItemsMap(changes.listItems ? changes.listItems.currentValue : this.listItems);
            }
        };
        /**
         * @author Ahsan Ayaz
         * @desc Updates the items property for the context provided to the dropdown template
         * @param items - the list of items to be assigned
         */
        DropdownComponent.prototype.filterItems = function (searchTerm, items) {
            if (searchTerm === void 0) { searchTerm = this.inputVal; }
            if (items === void 0) { items = this.listItems; }
            this.context.items = __spread(this.dropdownItemsFilter.transform(items, this.config, searchTerm));
            this.ddIdPrefix = this.getRandomString();
        };
        DropdownComponent.prototype.getRandomString = function () {
            return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
        };
        DropdownComponent.prototype.populateItemsMap = function (items, prefix) {
            var _this = this;
            if (prefix === void 0) { prefix = null; }
            if (prefix === null) {
                prefix = '';
            }
            else {
                prefix += this.identifierSeparator;
            }
            items.map(function (item, index) {
                var newPrefix = prefix + index;
                item.tiIdentifier = newPrefix;
                _this.itemsMap[newPrefix] = item;
                if (item[_this.config.nestedTagProperty] && item[_this.config.nestedTagProperty].length) {
                    _this.populateItemsMap(item[_this.config.nestedTagProperty], newPrefix);
                }
            });
        };
        /**
         * @author Ahsan Ayaz
         * @desc When an option is clicked from the options dropdown
         * @param item - item clicked
         */
        DropdownComponent.prototype.onItemClicked = function (item, $event) {
            if ($event === void 0) { $event = null; }
            if ($event) {
                $event.stopImmediatePropagation(); // for nested items
            }
            this.itemClicked.emit(item);
        };
        DropdownComponent.prototype.handleKeyUp = function (event) {
            event.stopImmediatePropagation();
            if (!this.keyboardEventsManager) {
                return;
            }
            var isKeyDown = this.isKeyDown(event);
            var isKeyUp = this.isKeyUp(event);
            var isKeyEnter = this.isKeyEnter(event);
            if (isKeyDown || isKeyUp) {
                // passing the event to key manager so we get a change fired
                this.setActiveElement(event);
            }
            else if (isKeyEnter &&
                this.keyboardEventsManager.activeItem) {
                this.itemClicked.emit(this.keyboardEventsManager.activeItem);
            }
        };
        DropdownComponent.prototype.isKeyDown = function (event) {
            // tslint:disable-next-line: deprecation
            return event.key === KEY_CODES.ARROW_DOWN || event.keyCode === keycodes.DOWN_ARROW;
        };
        DropdownComponent.prototype.isKeyUp = function (event) {
            // tslint:disable-next-line: deprecation
            return event.key === KEY_CODES.ARROW_UP || event.keyCode === keycodes.UP_ARROW;
        };
        DropdownComponent.prototype.isKeyEnter = function (event) {
            // tslint:disable-next-line: deprecation
            return event.key === KEY_CODES.ENTER || event.keyCode === keycodes.ENTER;
        };
        DropdownComponent.prototype.setActiveElement = function (event) {
            var isKeyDown = this.isKeyDown(event);
            var isKeyUp = this.isKeyUp(event);
            var previousActiveItem = __assign({}, this.keyboardEventsManager.activeItem);
            if (isKeyDown) {
                this.setNextActiveElement(previousActiveItem, this.listItems);
            }
            else if (isKeyUp) {
                this.setPreviousActiveElement(previousActiveItem, this.listItems);
            }
        };
        DropdownComponent.prototype.setNextActiveElement = function (currentActiveItem, items) {
            var _this = this;
            var identifier = currentActiveItem.tiIdentifier;
            if (!identifier) {
                items[0].tiKeyboardActive = true;
                this.keyboardEventsManager.setFirstItemActive();
                return;
            }
            var keyIdentifierArr = identifier.split(this.identifierSeparator);
            var keyIdentifier;
            var treeItems;
            var index;
            keyIdentifier = keyIdentifierArr.length > 1 ?
                __spread(keyIdentifierArr).splice(0, keyIdentifierArr.length - 1).join(this.identifierSeparator) :
                keyIdentifierArr[0];
            treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + _this.identifierSeparator).test(key); });
            if (!treeItems.length) {
                treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + "$").test(key); });
            }
            index = treeItems.findIndex(function (id) { return id === identifier; });
            if (index === treeItems.length - 1) {
                this.setActiveElementRecursively(this.findNextParent(keyIdentifierArr), this.listItems);
            }
            else {
                this.setActiveElementRecursively(treeItems[index + 1], this.listItems);
            }
        };
        DropdownComponent.prototype.findNextParent = function (keyIdentifierArr) {
            var keyIdentifier;
            var treeItems;
            if (keyIdentifierArr.length === 1) {
                var nextIdentifier = "" + (+keyIdentifierArr[0] + 1);
                if (this.itemsMap[nextIdentifier]) {
                    return nextIdentifier;
                }
                return keyIdentifierArr[0];
            }
            var nextIdArr = __spread(keyIdentifierArr).splice(0, keyIdentifierArr.length - 1);
            nextIdArr[nextIdArr.length - 1] = "" + ((+nextIdArr[nextIdArr.length - 1]) + 1);
            keyIdentifier = nextIdArr.join(this.identifierSeparator);
            treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier).test(key); });
            if (treeItems.length) {
                return treeItems[0];
            }
            else {
                return this.findNextParent(__spread(keyIdentifierArr.splice(0, keyIdentifierArr.length - 1)));
            }
        };
        DropdownComponent.prototype.setPreviousActiveElement = function (currentActiveItem, items) {
            var _this = this;
            var identifier = currentActiveItem.tiIdentifier;
            if (!identifier) {
                items[items.length - 1].tiKeyboardActive = true;
                this.keyboardEventsManager.setActiveItem(items[items.length - 1]);
                return;
            }
            var keyIdentifierArr = identifier.split(this.identifierSeparator);
            var keyIdentifier;
            var treeItems;
            var index;
            keyIdentifier = keyIdentifierArr.length > 1 ?
                __spread(keyIdentifierArr).splice(0, keyIdentifierArr.length - 1).join(this.identifierSeparator) :
                keyIdentifierArr[0];
            treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + "(" + _this.identifierSeparator + ")?").test(key); });
            if (!treeItems.length) {
                treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + "$").test(key); });
            }
            index = treeItems.findIndex(function (id) { return id === identifier; });
            if (treeItems.length === 1 || index === 0) {
                this.setActiveElementRecursively(this.findPrevousParentLastChild(keyIdentifierArr, identifier), this.listItems);
            }
            else {
                this.setActiveElementRecursively(treeItems[index - 1], this.listItems);
            }
        };
        DropdownComponent.prototype.findPrevousParentLastChild = function (keyIdentifierArr, prevItemIdentifier) {
            var _this = this;
            var keyIdentifier;
            var isOnlyItem = keyIdentifierArr.length === 1;
            var prevIdArr = !!isOnlyItem ? __spread(keyIdentifierArr) :
                __spread(keyIdentifierArr).splice(0, keyIdentifierArr.length - 1);
            prevIdArr[prevIdArr.length - 1] = !!isOnlyItem ? "" + ((+prevIdArr[prevIdArr.length - 1]) - 1) : prevIdArr[prevIdArr.length - 1];
            keyIdentifier = prevIdArr.join(this.identifierSeparator);
            var treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + _this.identifierSeparator).test(key); });
            if (!treeItems.length) {
                treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + "$").test(key); });
            }
            if (treeItems.length) {
                if (treeItems.indexOf(prevItemIdentifier) !== -1) {
                    return keyIdentifier;
                }
                return treeItems[treeItems.length - 1];
            }
            else if (keyIdentifierArr.length > 1) {
                return this.findPrevousParentLastChild(__spread(keyIdentifierArr.splice(0, keyIdentifierArr.length - 1)), prevItemIdentifier);
            }
            else {
                keyIdentifier = keyIdentifierArr.join(this.identifierSeparator);
                return keyIdentifier;
            }
        };
        DropdownComponent.prototype.setActiveElementRecursively = function (identifier, items) {
            for (var i = 0, len = items.length; i < len; ++i) {
                items[i].tiKeyboardActive = false;
                if (items[i].tiIdentifier === identifier) {
                    this.keyboardEventsManager = new a11y.ListKeyManager(__spread(items));
                    items[i].tiKeyboardActive = true; // select next item
                    this.keyboardEventsManager.setActiveItem(items[i]);
                }
                if (items[i][this.config.nestedTagProperty] && items[i][this.config.nestedTagProperty].length) {
                    this.setActiveElementRecursively(identifier, items[i][this.config.nestedTagProperty]);
                }
            }
        };
        DropdownComponent.ctorParameters = function () { return [
            { type: AngularTagsInputService }
        ]; };
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "config", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "listItems", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "inputVal", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "dropDownTemplate", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "tagsLoading", void 0);
        __decorate([
            core.Input()
        ], DropdownComponent.prototype, "keyPress", void 0);
        __decorate([
            core.Output()
        ], DropdownComponent.prototype, "itemAdded", void 0);
        __decorate([
            core.Output()
        ], DropdownComponent.prototype, "itemClicked", void 0);
        __decorate([
            core.ViewChild('defaultTagOptionTemplate', { static: true })
        ], DropdownComponent.prototype, "defaultTagOptionTemplate", void 0);
        DropdownComponent = __decorate([
            core.Component({
                selector: 'ti-dropdown',
                template: "\n<ng-container\n *ngTemplateOutlet=\"dropDownTemplate; context: context\">\n</ng-container>\n\n<!-- Default Tag Options Template -->\n<ng-template #defaultTagOptionTemplate let-items=\"items\" let-config=\"config\">\n  <div class=\"angular-tags-dropdown\">\n    <div class=\"angular-tags-dropdown__list\">\n      <ng-container *ngFor=\"let item of items, let i = index\">\n        <div\n          class=\"angular-tags-dropdown__list__item\"\n          (click)=\"onItemClicked(item)\"\n          tiKeyboardActiveClass=\"angular-tags-dropdown__list__item--active\"\n          [isKeyboardActiveItem]=\"item.tiKeyboardActive\"\n          >\n          {{item[config.displayProperty]}}\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n",
                styles: [":host{display:block}:host .angular-tags-dropdown{padding:8px 10px}:host .angular-tags-dropdown__list__item{padding:8px 10px;cursor:pointer;transition:.5s}:host .angular-tags-dropdown__list__item:hover{background:#dcdcdc}:host .angular-tags-dropdown__list__item--active{background:#333;color:#fff}"]
            })
        ], DropdownComponent);
        return DropdownComponent;
    }());

    var AngularTagsInputComponent = /** @class */ (function () {
        function AngularTagsInputComponent(sso, tagsService) {
            this.sso = sso;
            this.tagsService = tagsService;
            this.tagsData = [];
            this.disabled = false;
            this.dropDownTemplate = null;
            this.tagItemTemplate = null;
            this.required = false;
            this.tagRemoved = new core.EventEmitter();
            this.tagAdded = new core.EventEmitter();
            this.valueChanged = new core.EventEmitter();
            this.itemClicked = new core.EventEmitter();
            this.tags = [];
            this.defaultConfig = {
                defaultClass: 'angular-tags-input',
                additionalClasses: '',
                displayProperty: 'value',
                identifier: 'id',
                onlyFromAutoComplete: false,
                placeholder: 'Search',
                hideAddedTags: true,
                nestedTagProperty: '',
                showTagsSelectedInDD: false,
                hideTags: false,
                maxItems: null,
                nestedTagParentProp: '',
                keyboardActiveClass: 'angular-tags-dropdown__list__item--active'
            };
            this.dropdownOverlayPosition = [
                { offsetY: 12, originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },
                { offsetY: -28, originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },
                { offsetY: 28, originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },
                { offsetY: -28, originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },
            ];
            this.unAddedTagsPipe = new UnAddedTagsPipe();
        }
        AngularTagsInputComponent.prototype.keyEvent = function (event) {
            this.inputKeyPress(event);
        };
        AngularTagsInputComponent.prototype.ngOnChanges = function (changes) {
            // if there's no change in the tagsData, do nothing
            if (!changes.tagsData || !this.isInputFocused) {
                return;
            }
            // If the previous walue was `null` or `undefined`, we're initializing that as an array here
            // so we can avoid breaking the process further.
            if (!changes.tagsData.previousValue) {
                changes.tagsData.previousValue = [];
            }
            // if we have the value of the tags changed, we need to show the dropdown immediately
            // we don't show this on the first change, because that's when the first value is assigned
            if (changes.tagsData && changes.tagsData.currentValue !== changes.tagsData.previousValue
                && !changes.tagsData.firstChange) {
                // if the values don't match, show the dropdown
                if (changes.tagsData.currentValue.length !== changes.tagsData.previousValue.length && !!this.dropdownShownYet) {
                    return this.showDropdown(changes.tagsData.currentValue);
                }
                if (changes.tagsData.previousValue.length === 0) {
                    return;
                }
                /* since the values are array, we need to compare the elements within
                 * avoiding the usage of any external library, matching the elements using identifier
                 * of the elements here
                 */
                for (var i = 0, len = changes.tagsData.currentValue.length; i < len; ++i) {
                    if (changes.tagsData.currentValue[i][this.config.identifier] !== changes.tagsData.previousValue[i][this.config.identifier]) {
                        // as soon as the difference in elements is found, show the element and stop further execution of for loop
                        return this.showDropdown(changes.tagsData.currentValue);
                    }
                }
            }
        };
        AngularTagsInputComponent.prototype.onFocusChange = function (val) {
            var _this = this;
            this.isInputFocused = val;
            if (!val && this.config.hideDDOnBlur) {
                setTimeout(function () {
                    _this.hideDropdown();
                }, 400);
            }
        };
        AngularTagsInputComponent.prototype.onInputValueChanged = function (val) {
            this.inputVal = val;
            this.valueChanged.emit(val);
        };
        AngularTagsInputComponent.prototype.ngOnInit = function () {
            this.config = __assign({}, this.defaultConfig, this.config);
            this.ddScrollStrategy = this.sso.reposition();
        };
        /**
         * @author Ahsan Ayaz
         * @desc Triggers when the value of the form control (or ngModel) is changed.
         * We're using the handler to assign the values to the tags array that we have.
         */
        AngularTagsInputComponent.prototype.writeValue = function (tags) {
            var _this = this;
            tags = tags ? tags : [];
            tags = Array.isArray(tags) ? tags : [tags];
            this.tags = tags.map(function (tag) {
                var _a;
                return __assign({}, tag, (_a = {},
                    _a[_this.config.identifier] = tag[_this.config.identifier],
                    _a[_this.config.displayProperty] = tag[_this.config.displayProperty],
                    _a));
            });
            if (this.config.showTagsSelectedInDD) {
                setTimeout(function () {
                    _this.tags.map(function (tag) {
                        _this.selectRelatedTags(tag);
                    });
                });
            }
        };
        /**
         * @author Ahsan Ayaz
         * @desc Registers the on change function to the value accessor
         */
        AngularTagsInputComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        /**
         * Validator function for the form control
         * Doesn't do anything if the control is not required
         * If it is required, checks if the control contains value
         */
        AngularTagsInputComponent.prototype.validate = function (control) {
            if (this.required === false) {
                return null;
            }
            return (!!control.value && control.value.length) ? null : {
                required: true,
            };
        };
        /**
         * @author Ahsan Ayaz
         * @desc Triggers when the tag input is focused
         */
        AngularTagsInputComponent.prototype.onInputFocus = function () {
            if (this.config.clearInputOnFocus) {
                if (this.tagInput.lastValueEmitted !== '') {
                    this.tagInput.tagInputForm.get('tagInputVal').setValue('');
                }
                this.tagInput.resetInput();
            }
            if (this.config.clearTagsOnFocus) {
                this.tags.length = 0;
            }
            this.showDropdown();
            this.onFocusChange(true);
        };
        /**
         * @author Ahsan Ayaz
         * @desc Shows the dropdown with options listing
         */
        AngularTagsInputComponent.prototype.showDropdown = function (recentTags) {
            if (recentTags === void 0) { recentTags = null; }
            var unAddedTags = this.unAddedTagsPipe.transform(!!recentTags ? recentTags : this.tagsData, {
                tagsAdded: this.tags,
                config: this.config
            });
            if (unAddedTags.length) { // only show dropdown when we have data to show
                this.isDropdownOpen = true;
            }
            if (!this.dropdownShownYet) {
                this.dropdownShownYet = true;
            }
        };
        /**
         * @author Ahsan Ayaz
         * @desc Hides the options listing dropdown
         */
        AngularTagsInputComponent.prototype.hideDropdown = function () {
            this.isDropdownOpen = false;
            this.tagsData = this.removeKeyboardSelection(this.tagsData);
        };
        AngularTagsInputComponent.prototype.removeKeyboardSelection = function (items) {
            var _this = this;
            return items.map(function (tag) {
                if (tag[_this.config.nestedTagProperty] && tag[_this.config.nestedTagProperty].length) {
                    tag[_this.config.nestedTagProperty] = _this.removeKeyboardSelection(tag[_this.config.nestedTagProperty]);
                }
                return __assign({}, tag, { tiKeyboardActive: false });
            });
        };
        AngularTagsInputComponent.prototype.ngAfterViewInit = function () {
            if (!!this.config || !this.onChange) {
                console.warn('Please use ngModel or FormControlName with <ti-angular-tags-input>');
            }
            if (this.config.nestedTagProperty) {
                // we need the parent property to be able to unselect the parent when a child tag is unselected
                if (!this.config.nestedTagParentProp) {
                    // tslint:disable-next-line:max-line-length
                    throw new Error('nestedTagProperty provided but nestedTagParentProp not provided.\nThis will cause the parent tag to not remove if any of the children is removed');
                }
            }
        };
        /**
         * @author Ahsan Ayaz
         * @desc Adds the tag in the tags list (tags array).
         * Avoids duplicate tags addition
         * @param tag - tag to add
         */
        AngularTagsInputComponent.prototype.addTag = function (tag) {
            var _this = this;
            if (this.config.showTagsSelectedInDD) {
                tag.tiSelected = true; // marks the element as selected
            }
            if (this.config.maxItems > 0 && this.tags.length === this.config.maxItems) {
                return;
            }
            if (!this.tags.find(function (tagItem) { return tagItem[_this.config.identifier] === tag[_this.config.identifier]; })) {
                this.tags = __spread(this.tags, [tag]);
                this.onChange(this.tags);
            }
        };
        /**
         * @author Ahsan Ayaz
         * @desc Removes the tags from the tags list
         * @param tag - tag to remove
         */
        AngularTagsInputComponent.prototype.removeTag = function (tag) {
            var _this = this;
            this.tags = this.tags.filter(function (tagItem) { return tagItem[_this.config.identifier] !== tag[_this.config.identifier]; });
            // when we've removed all the tags, we want to get the default tags
            if (this.tags.length === 0) {
                this.tagInput.resetInput();
                this.valueChanged.emit('');
            }
            this.onChange(this.tags);
        };
        /**
         * @author Ahsan Ayaz
         * @desc Triggers when the item is clicked from the dropdown
         * @param tag - tag selected
         */
        AngularTagsInputComponent.prototype.onItemClicked = function (tag) {
            var _this = this;
            // if we don't have to toggle, add the item as tag right away
            if (this.config.toggleSelectionOnClick) {
                // we have to toggle selection. First, let's see if the tag doesn't exist already in the selected tags
                if (!tag.tiSelected && !this.tags.find(function (tagItem) { return tagItem[_this.config.identifier] === tag[_this.config.identifier]; })) {
                    this.addTag(tag);
                    this.selectRelatedTags(tag);
                    this.tagAdded.emit(this.tagsService.getMainTagAfterAdding(this.tagsData, tag, this.tags, this.config));
                }
                else { // if the tag is already selected, remove
                    this.removeTag(tag);
                    this.removeTagSelection(tag);
                    this.tagRemoved.emit(tag);
                }
            }
            else {
                this.addTag(tag);
                this.selectRelatedTags(tag);
                this.tagAdded.emit(this.tagsService.getMainTagAfterAdding(this.tagsData, tag, this.tags, this.config));
            }
            this.tagInput.resetInput();
            this.itemClicked.emit(tag);
            this.hideDropdown();
        };
        /**
         * @author Ahsan Ayaz
         * @desc Removes the tag seleced state (and of the children)
         * @param tag - the tag to unmark as selected
         */
        AngularTagsInputComponent.prototype.removeTagSelection = function (tag, ignoreChildren, ignoreParent) {
            var _this = this;
            if (ignoreChildren === void 0) { ignoreChildren = false; }
            if (ignoreParent === void 0) { ignoreParent = false; }
            tag.tiSelected = false;
            if (!ignoreChildren && tag[this.config.nestedTagProperty]) {
                for (var i = 0, len = tag[this.config.nestedTagProperty].length; i < len; ++i) {
                    this.removeTag(tag[this.config.nestedTagProperty][i]);
                    this.removeTagSelection(tag[this.config.nestedTagProperty][i], ignoreChildren);
                }
            }
            if (tag[this.config.nestedTagParentProp] && !ignoreParent) {
                var parentTag = this.tagsService.findTagById(this.tagsData, tag[this.config.nestedTagParentProp], this.config);
                if (parentTag && parentTag.tiSelected) {
                    this.removeTag(parentTag);
                    this.removeTagSelection(parentTag, true, ignoreParent);
                    parentTag[this.config.nestedTagProperty].map(function (tagItem) {
                        // tslint:disable-next-line:triple-equals
                        if (tagItem[_this.config.identifier] != tag[_this.config.identifier]) {
                            _this.addTag(tagItem);
                            _this.selectRelatedTags(tagItem, false, true);
                        }
                    });
                }
            }
            this.onChange(this.tags);
        };
        /**
         * @author Ahsan Ayaz
         * @desc triggers on close button click of the tags
         * @param tag - the tag to remove
         */
        AngularTagsInputComponent.prototype.tagCloseClicked = function (tag) {
            this.tagRemoved.emit(tag);
            this.removeTag(tag);
            this.removeTagSelection(tag);
        };
        /**
         * @author Ahsan Ayaz
         * @desc Selects/adds the retated tags (parent and/or children)
         * @param tag - the tag to mark as selected
         */
        AngularTagsInputComponent.prototype.selectRelatedTags = function (tag, ignoreChildren, ignoreParent) {
            var _this = this;
            if (ignoreChildren === void 0) { ignoreChildren = false; }
            if (ignoreParent === void 0) { ignoreParent = false; }
            if (this.config.showTagsSelectedInDD) {
                tag.tiSelected = true;
            }
            if (tag[this.config.nestedTagProperty] && !ignoreChildren) {
                for (var i = 0, len = tag[this.config.nestedTagProperty].length; i < len; ++i) {
                    if (this.config.showParentTagsOnly) {
                        // remove the children if we only have to keep parent
                        this.removeTag(tag[this.config.nestedTagProperty][i]);
                        // making sure we're targeting only children, ignoring parents
                        this.selectRelatedTags(tag[this.config.nestedTagProperty][i], false, true);
                    }
                    else {
                        this.addTag(tag[this.config.nestedTagProperty][i]);
                    }
                }
            }
            if (tag[this.config.nestedTagParentProp] && !ignoreParent) {
                var parentTag_1 = this.tagsService.findTagById(this.tagsData, tag[this.config.nestedTagParentProp], this.config);
                if (!parentTag_1) {
                    return;
                }
                var parentTagChildren = parentTag_1[this.config.nestedTagProperty].length;
                var childrensSelected = this.tags.filter(function (tagItem) {
                    // tslint:disable-next-line:triple-equals
                    return tagItem[_this.config.nestedTagParentProp] == parentTag_1[_this.config.identifier];
                }).length;
                if ((parentTagChildren > 0 && childrensSelected > 0) &&
                    (this.config.childrenCountProperty ?
                        childrensSelected === parentTag_1[this.config.childrenCountProperty] :
                        childrensSelected === parentTagChildren)) {
                    this.addTag(parentTag_1);
                    this.selectRelatedTags(parentTag_1, false, false);
                }
            }
            this.onChange(this.tags);
        };
        AngularTagsInputComponent.prototype.registerOnTouched = function (fn) {
            // throw new Error("Method not implemented.");
        };
        AngularTagsInputComponent.prototype.inputKeyPress = function ($event) {
            var _this = this;
            $event.stopImmediatePropagation();
            if (!this.isDropdownOpen &&
                ($event.key === KEY_CODES.ARROW_UP ||
                    $event.key === KEY_CODES.ARROW_DOWN)) {
                this.isDropdownOpen = true;
            }
            else if (this.isDropdownOpen &&
                $event.key === KEY_CODES.ESCAPE) {
                return this.hideDropdown();
            }
            // so we have the dropdown shown
            setTimeout(function () {
                if (_this.dropdown) {
                    _this.dropdown.handleKeyUp($event);
                }
            }, 10);
        };
        AngularTagsInputComponent.ctorParameters = function () { return [
            { type: overlay.ScrollStrategyOptions },
            { type: AngularTagsInputService }
        ]; };
        __decorate([
            core.ViewChild(DropdownComponent, { static: false })
        ], AngularTagsInputComponent.prototype, "dropdown", void 0);
        __decorate([
            core.Input()
        ], AngularTagsInputComponent.prototype, "config", void 0);
        __decorate([
            core.Input()
        ], AngularTagsInputComponent.prototype, "tagsData", void 0);
        __decorate([
            core.Input()
        ], AngularTagsInputComponent.prototype, "disabled", void 0);
        __decorate([
            core.Input()
        ], AngularTagsInputComponent.prototype, "tagsLoading", void 0);
        __decorate([
            core.Input()
        ], AngularTagsInputComponent.prototype, "dropDownTemplate", void 0);
        __decorate([
            core.Input()
        ], AngularTagsInputComponent.prototype, "tagItemTemplate", void 0);
        __decorate([
            core.Input()
        ], AngularTagsInputComponent.prototype, "required", void 0);
        __decorate([
            core.Output()
        ], AngularTagsInputComponent.prototype, "tagRemoved", void 0);
        __decorate([
            core.Output()
        ], AngularTagsInputComponent.prototype, "tagAdded", void 0);
        __decorate([
            core.Output()
        ], AngularTagsInputComponent.prototype, "valueChanged", void 0);
        __decorate([
            core.Output()
        ], AngularTagsInputComponent.prototype, "itemClicked", void 0);
        __decorate([
            core.ViewChild(TagInputComponent, { static: true })
        ], AngularTagsInputComponent.prototype, "tagInput", void 0);
        __decorate([
            core.HostListener('keyup', ['$event'])
        ], AngularTagsInputComponent.prototype, "keyEvent", null);
        AngularTagsInputComponent = __decorate([
            core.Component({
                selector: 'ti-angular-tags-input',
                template: "<div\n  class=\"angular-tags-input\"\n  [ngClass]=\"config.defaultClass + ' ' + config.additionalClasses\">\n  <div class=\"angular-tags-input__inp-container\" #dropdownTrigger=\"cdkOverlayOrigin\" cdkOverlayOrigin>\n    <ng-container *ngIf=\"!config.hideTags\">\n      <ti-tag\n        class=\"angular-tags-input__inp-container__tag\"\n        *ngFor=\"let tagItem of tags\"\n        [config]=\"config\"\n        [tagItem]=\"tagItem\"\n        [tagItemTemplate]=\"tagItemTemplate\"\n        (closeClicked)=\"tagCloseClicked($event)\">\n      </ti-tag>\n    </ng-container>\n    <ti-tag-input\n      [style.display]=\"config.hideInputOnSelection && tags.length ? 'none' : 'block'\"\n      [config]=\"config\"\n      [disabled]=\"disabled\"\n      class=\"angular-tags-input__inp-container__tag-input\"\n      (tagEntered)=\"addTag($event)\"\n      (valueChanged)=\"onInputValueChanged($event)\"\n      (inputFocused)=\"onInputFocus()\"\n      (inputBlurred)=\"onFocusChange(false);\"\n      (inputKeyPress)=\"inputKeyPress($event)\">\n    </ti-tag-input>\n  </div>\n  \n  <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\"dropdownTrigger\" [cdkConnectedOverlayOpen]=\"isDropdownOpen\"\n    [cdkConnectedOverlayHasBackdrop]=\"config.ddHasBackdrop\" (backdropClick)=\"hideDropdown()\"\n    [cdkConnectedOverlayPanelClass]=\"'angular-tags-input-dd-overlay' + config.dropdownClass ? config.dropdownClass : ''\"\n    [cdkConnectedOverlayScrollStrategy]=\"ddScrollStrategy\"\n    [cdkConnectedOverlayPositions]=\"dropdownOverlayPosition\"\n    [cdkConnectedOverlayMinWidth]=\"310\">\n    <div class=\"angular-tags-input__dd-container\">\n      <ti-dropdown\n        [inputVal]=\"inputVal\"\n        (itemClicked)=\"onItemClicked($event);\"\n        [dropDownTemplate]=\"dropDownTemplate\"\n        [listItems]=\"tagsData | unAddedTags: {tagsAdded: tags, config: config}\"\n        [config]=\"config\"\n        (itemAdded)=\"addTag($event);\">\n      </ti-dropdown>\n    </div>\n  </ng-template>\n</div>\n",
                providers: [
                    getAngularTagsInputValueAccessor(),
                    getAngularTagsInputValidatorsProvider()
                ],
                encapsulation: core.ViewEncapsulation.None,
                styles: ["ti-angular-tags-input{display:block;width:100%}.angular-tags-input{display:flex;flex-direction:row;align-items:center;margin:-3px 0}.angular-tags-input__inp-container{width:100%;display:flex;flex-direction:row;align-items:center;background:#fff;flex-wrap:wrap;padding:9px 18px 18px;position:relative;top:4px}.angular-tags-input__inp-container__tag-input{flex:1}.angular-tags-input__inp-container__tag{margin:0 10px 8px 0}.angular-tags-input__dd-container{display:block;width:100%}.cdk-overlay-container.select-assignee-overlay{z-index:1050}.cdk-overlay-container.task-menu-popover-overlay{z-index:2050}.duplicate-modal-overlay{z-index:999}.cdk-overlay-backdrop{display:block}.cdk-global-overlay-wrapper,.cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{display:block;position:fixed;z-index:1000}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;background-color:#fff;z-index:1000;display:flex;max-width:100%;max-height:100%;border:1px solid #fff;box-shadow:0 2px 14px 4px rgba(0,0,0,.1)}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;-webkit-tap-highlight-color:transparent;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}"]
            })
        ], AngularTagsInputComponent);
        return AngularTagsInputComponent;
    }());
    function getAngularTagsInputValueAccessor() {
        return {
            provide: forms.NG_VALUE_ACCESSOR,
            useExisting: core.forwardRef(function () { return AngularTagsInputComponent; }),
            multi: true,
        };
    }
    function getAngularTagsInputValidatorsProvider() {
        return {
            provide: forms.NG_VALIDATORS,
            useExisting: core.forwardRef(function () { return AngularTagsInputComponent; }),
            multi: true,
        };
    }

    var TagComponent = /** @class */ (function () {
        function TagComponent() {
            this.tagClass = 'default-tag';
            this.closeClicked = new core.EventEmitter();
        }
        TagComponent.prototype.ngOnInit = function () {
            if (!this.tagItemTemplate) { // if there's no template provided, assign the default one
                this.tagItemTemplate = this.defaultTagItemTemplate;
            }
            this.context = {
                item: this.tagItem,
                config: this.config,
                tagClass: this.tagClass,
                closeClicked: this.closeClicked
            };
        };
        __decorate([
            core.Input()
        ], TagComponent.prototype, "config", void 0);
        __decorate([
            core.Input()
        ], TagComponent.prototype, "tagItem", void 0);
        __decorate([
            core.Input()
        ], TagComponent.prototype, "tagClass", void 0);
        __decorate([
            core.Input()
        ], TagComponent.prototype, "tagItemTemplate", void 0);
        __decorate([
            core.Output()
        ], TagComponent.prototype, "closeClicked", void 0);
        __decorate([
            core.ViewChild('defaultTagItemTemplate', { static: true })
        ], TagComponent.prototype, "defaultTagItemTemplate", void 0);
        TagComponent = __decorate([
            core.Component({
                selector: 'ti-tag',
                template: "\n<ng-container\n *ngTemplateOutlet=\"tagItemTemplate; context: context;\">\n</ng-container>\n\n<!-- Default Tag Options Template -->\n<ng-template #defaultTagItemTemplate let-item=\"item\" let-tagClass=\"tagClass\" let-config=\"config\" let-closeClicked=\"closeClicked\">\n  <div class=\"angular-tag\" [ngClass]=\"tagClass + ''\">\n    <div class=\"angular-tag__text\" *ngIf=\"config\">\n      {{item[config.displayProperty]}}\n    </div>\n    <button type=\"button\" class=\"angular-tag__close-btn\" (click)=\"closeClicked.emit(item)\">\n      x\n    </button>\n  </div>\n</ng-template>\n\n\n",
                styles: [".angular-tag{display:flex;align-items:center}.angular-tag__text{margin-right:10px;flex:1}.default-tag .angular-tag__text{color:#fff}.angular-tag__close-btn{cursor:pointer}.default-tag .angular-tag__close-btn{padding-left:0;padding-right:0;background:0 0;border:none;color:#fff}.default-tag .angular-tag__close-btn:hover{color:#dcdcdc}.angular-tag.default-tag{background:#344860;padding:6px 10px;transition:.5s}.angular-tag.default-tag:hover{background:#333}"]
            })
        ], TagComponent);
        return TagComponent;
    }());

    var KeyboardActiveClassDirective = /** @class */ (function () {
        function KeyboardActiveClassDirective(el, cdRef) {
            this.el = el;
            this.cdRef = cdRef;
            this.isKeyboardActiveItem = false;
        }
        KeyboardActiveClassDirective.prototype.ngOnInit = function () {
            if (!this.tiKeyboardActiveClass) {
                console.warn('tiKeyboardActiveClass needs a class to apply. But no class was passed.');
            }
        };
        KeyboardActiveClassDirective.prototype.ngOnChanges = function (simpleChanges) {
            if (!simpleChanges.isKeyboardActiveItem) {
                return;
            }
            if (simpleChanges.isKeyboardActiveItem.currentValue !== simpleChanges.isKeyboardActiveItem.previousValue) {
                this.evaluateClassApplication();
            }
        };
        KeyboardActiveClassDirective.prototype.evaluateClassApplication = function () {
            if (this.isKeyboardActiveItem) {
                this.el.nativeElement.classList.add(this.tiKeyboardActiveClass);
                this.el.nativeElement.scrollIntoView(false);
            }
            else {
                this.el.nativeElement.classList.remove(this.tiKeyboardActiveClass);
            }
            this.cdRef.markForCheck();
        };
        KeyboardActiveClassDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: core.ChangeDetectorRef }
        ]; };
        __decorate([
            core.Input()
        ], KeyboardActiveClassDirective.prototype, "isKeyboardActiveItem", void 0);
        __decorate([
            core.Input()
        ], KeyboardActiveClassDirective.prototype, "tiKeyboardActiveClass", void 0);
        KeyboardActiveClassDirective = __decorate([
            core.Directive({
                selector: '[tiKeyboardActiveClass]'
            })
        ], KeyboardActiveClassDirective);
        return KeyboardActiveClassDirective;
    }());

    var AngularTagsInputModule = /** @class */ (function () {
        function AngularTagsInputModule() {
        }
        AngularTagsInputModule = __decorate([
            core.NgModule({
                declarations: [
                    AngularTagsInputComponent,
                    TagComponent,
                    TagInputComponent,
                    DropdownComponent,
                    UnAddedTagsPipe,
                    DropdownItemsFilterPipe,
                    KeyboardActiveClassDirective
                ],
                imports: [
                    common.CommonModule,
                    forms.FormsModule,
                    forms.ReactiveFormsModule,
                    overlay.OverlayModule
                ],
                exports: [AngularTagsInputComponent, KeyboardActiveClassDirective]
            })
        ], AngularTagsInputModule);
        return AngularTagsInputModule;
    }());

    exports.AngularTagsInputComponent = AngularTagsInputComponent;
    exports.AngularTagsInputModule = AngularTagsInputModule;
    exports.AngularTagsInputService = AngularTagsInputService;
    exports.KeyboardActiveClassDirective = KeyboardActiveClassDirective;
    exports.UnAddedTagsPipe = UnAddedTagsPipe;
    exports.getAngularTagsInputValidatorsProvider = getAngularTagsInputValidatorsProvider;
    exports.getAngularTagsInputValueAccessor = getAngularTagsInputValueAccessor;
    exports.ɵa = DropdownComponent;
    exports.ɵb = TagInputComponent;
    exports.ɵc = TagComponent;
    exports.ɵd = DropdownItemsFilterPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=iomechs-angular-tags-input.umd.js.map
