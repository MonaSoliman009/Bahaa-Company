import { ScrollStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { AfterViewInit, EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ControlValueAccessor, Validator, FormControl } from '@angular/forms';
import { AngularTagsInputService } from './angular-tags-input.service';
import { TagInputComponent } from './tag-input/tag-input.component';
import { AngularTagItem, AngularTagsInputConfig } from './tags-input-interfaces';
import { UnAddedTagsPipe } from './un-added-tags.pipe';
import { DropdownComponent } from './dropdown/dropdown.component';
import * as ɵngcc0 from '@angular/core';
export declare class AngularTagsInputComponent implements OnInit, AfterViewInit, ControlValueAccessor, OnChanges, Validator {
    private readonly sso;
    private tagsService;
    dropdown: DropdownComponent;
    config: AngularTagsInputConfig;
    tagsData: Array<any>;
    disabled: boolean;
    tagsLoading: boolean;
    dropDownTemplate: TemplateRef<any>;
    tagItemTemplate: TemplateRef<any>;
    required: boolean;
    tagRemoved: EventEmitter<any>;
    tagAdded: EventEmitter<any>;
    valueChanged: EventEmitter<any>;
    itemClicked: EventEmitter<any>;
    tagInput: TagInputComponent;
    tags: Array<AngularTagItem>;
    isInputFocused: boolean;
    inputVal: string;
    defaultConfig: AngularTagsInputConfig;
    onChange: (items: AngularTagItem[]) => void;
    dropdownOverlayPosition: {
        offsetY: number;
        originX: string;
        originY: string;
        overlayX: string;
        overlayY: string;
    }[];
    ddScrollStrategy: ScrollStrategy;
    isDropdownOpen: boolean;
    dropdownShownYet: boolean;
    unAddedTagsPipe: UnAddedTagsPipe;
    constructor(sso: ScrollStrategyOptions, tagsService: AngularTagsInputService);
    keyEvent(event: any): void;
    ngOnChanges(changes: SimpleChanges): void;
    onFocusChange(val: boolean): void;
    onInputValueChanged(val: string): void;
    ngOnInit(): void;
    /**
     * @author Ahsan Ayaz
     * @desc Triggers when the value of the form control (or ngModel) is changed.
     * We're using the handler to assign the values to the tags array that we have.
     */
    writeValue(tags: Array<any>): void;
    /**
     * @author Ahsan Ayaz
     * @desc Registers the on change function to the value accessor
     */
    registerOnChange(fn: any): void;
    /**
     * Validator function for the form control
     * Doesn't do anything if the control is not required
     * If it is required, checks if the control contains value
     */
    validate(control: FormControl): {
        required: boolean;
    };
    /**
     * @author Ahsan Ayaz
     * @desc Triggers when the tag input is focused
     */
    onInputFocus(): void;
    /**
     * @author Ahsan Ayaz
     * @desc Shows the dropdown with options listing
     */
    showDropdown(recentTags?: Array<any>): void;
    /**
     * @author Ahsan Ayaz
     * @desc Hides the options listing dropdown
     */
    hideDropdown(): void;
    removeKeyboardSelection(items: Array<AngularTagItem>): {
        tiKeyboardActive: boolean;
        newTag?: boolean;
        tiSelected?: boolean;
        tiIdentifier?: string;
    }[];
    ngAfterViewInit(): void;
    /**
     * @author Ahsan Ayaz
     * @desc Adds the tag in the tags list (tags array).
     * Avoids duplicate tags addition
     * @param tag - tag to add
     */
    addTag(tag: AngularTagItem): void;
    /**
     * @author Ahsan Ayaz
     * @desc Removes the tags from the tags list
     * @param tag - tag to remove
     */
    removeTag(tag: AngularTagItem): void;
    /**
     * @author Ahsan Ayaz
     * @desc Triggers when the item is clicked from the dropdown
     * @param tag - tag selected
     */
    onItemClicked(tag: AngularTagItem): void;
    /**
     * @author Ahsan Ayaz
     * @desc Removes the tag seleced state (and of the children)
     * @param tag - the tag to unmark as selected
     */
    removeTagSelection(tag: AngularTagItem, ignoreChildren?: boolean, ignoreParent?: boolean): void;
    /**
     * @author Ahsan Ayaz
     * @desc triggers on close button click of the tags
     * @param tag - the tag to remove
     */
    tagCloseClicked(tag: any): void;
    /**
     * @author Ahsan Ayaz
     * @desc Selects/adds the retated tags (parent and/or children)
     * @param tag - the tag to mark as selected
     */
    selectRelatedTags(tag: AngularTagItem, ignoreChildren?: boolean, ignoreParent?: boolean): void;
    registerOnTouched(fn: any): void;
    inputKeyPress($event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularTagsInputComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AngularTagsInputComponent, "ti-angular-tags-input", never, { "tagsData": "tagsData"; "disabled": "disabled"; "dropDownTemplate": "dropDownTemplate"; "tagItemTemplate": "tagItemTemplate"; "required": "required"; "config": "config"; "tagsLoading": "tagsLoading"; }, { "tagRemoved": "tagRemoved"; "tagAdded": "tagAdded"; "valueChanged": "valueChanged"; "itemClicked": "itemClicked"; }, never, never>;
}
export declare function getAngularTagsInputValueAccessor(): {
    provide: import("@angular/core").InjectionToken<ControlValueAccessor>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export declare function getAngularTagsInputValidatorsProvider(): {
    provide: import("@angular/core").InjectionToken<(Function | Validator)[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};

//# sourceMappingURL=angular-tags-input.component.d.ts.map