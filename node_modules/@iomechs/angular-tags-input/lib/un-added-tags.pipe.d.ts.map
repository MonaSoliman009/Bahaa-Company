{"version":3,"file":"un-added-tags.pipe.d.ts","sources":["un-added-tags.pipe.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { PipeTransform } from '@angular/core';\r\nimport { AngularTagsInputConfig } from './tags-input-interfaces';\r\nexport declare class UnAddedTagsPipe implements PipeTransform {\r\n    transform(tagsList: Array<any>, args: {\r\n        tagsAdded: Array<any>;\r\n        config: AngularTagsInputConfig;\r\n    }): any;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Compares a tag against all the tags added based on config provided\r\n     * @param currentTag - the tag to check if it exists in the selection\r\n     * @param tagsAdded - an array of the tags added to the selection\r\n     * @param config - the config provided to the Angular Tags Input component\r\n     * @return boolean - if the tag is added already\r\n     */\r\n    isTagAlreadySelected(currentTag: any, tagsAdded: any, config: AngularTagsInputConfig): any;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Compares the two tags based on the identifier provided in the config\r\n     * @param currentTag - the tag in the iteration to compare\r\n     * @param tagItem - the tag (already selected) to compare with\r\n     * @param config - the config provided to the Angular Tags Input component\r\n     * @return boolean - if the tags passed are the same.\r\n     */\r\n    areTagsMatching(currentTag: any, tagItem: any, config: any): boolean;\r\n    setSelectedTags(tags: any, config: AngularTagsInputConfig, tagsAdded: any, isSelected?: any): any;\r\n}\r\n"]}