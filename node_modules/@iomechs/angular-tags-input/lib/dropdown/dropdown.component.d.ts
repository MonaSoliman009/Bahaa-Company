import { EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { ListKeyManager, ListKeyManagerOption } from '@angular/cdk/a11y';
import { AngularTagItem, AngularTagsInputConfig, AngularTagsInputDDFns } from '../tags-input-interfaces';
import { AngularTagsInputService } from '../angular-tags-input.service';
import { DropdownItemsFilterPipe } from '../dropdown-items-filter.pipe';
export declare class DropdownComponent implements OnInit, AngularTagsInputDDFns, OnChanges {
    private tagsInputService;
    config: AngularTagsInputConfig;
    listItems: Array<AngularTagItem>;
    inputVal: string;
    dropDownTemplate: TemplateRef<any>;
    tagsLoading: boolean;
    keyPress: any;
    itemAdded: EventEmitter<AngularTagItem>;
    itemClicked: EventEmitter<AngularTagItem>;
    defaultTagOptionTemplate: TemplateRef<any>;
    dropdownItemsFilter: DropdownItemsFilterPipe;
    ddIdPrefix: string;
    context: any;
    activeIndex: number;
    identifierSeparator: string;
    keyboardEventsManager: ListKeyManager<ListKeyManagerOption>;
    itemsMap: Map<string, any>;
    constructor(tagsInputService: AngularTagsInputService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @author Ahsan Ayaz
     * @desc Updates the items property for the context provided to the dropdown template
     * @param items - the list of items to be assigned
     */
    filterItems(searchTerm?: string, items?: AngularTagItem[]): void;
    private getRandomString;
    populateItemsMap(items: any, prefix?: any): void;
    /**
     * @author Ahsan Ayaz
     * @desc When an option is clicked from the options dropdown
     * @param item - item clicked
     */
    onItemClicked(item: AngularTagItem, $event?: any): void;
    handleKeyUp(event: KeyboardEvent): void;
    isKeyDown(event: any): boolean;
    isKeyUp(event: any): boolean;
    isKeyEnter(event: any): boolean;
    setActiveElement(event: any): void;
    setNextActiveElement(currentActiveItem: AngularTagItem, items: any): void;
    findNextParent(keyIdentifierArr: any): any;
    setPreviousActiveElement(currentActiveItem: AngularTagItem, items: any): void;
    findPrevousParentLastChild(keyIdentifierArr: any, prevItemIdentifier: string): any;
    setActiveElementRecursively(identifier: any, items: any): void;
}
