{"version":3,"file":"angular-tags-input.component.d.ts","sources":["angular-tags-input.component.d.ts"],"names":[],"mappingssourcesContent":["import { ScrollStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';\r\nimport { AfterViewInit, EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { ControlValueAccessor, Validator, FormControl } from '@angular/forms';\r\nimport { AngularTagsInputService } from './angular-tags-input.service';\r\nimport { TagInputComponent } from './tag-input/tag-input.component';\r\nimport { AngularTagItem, AngularTagsInputConfig } from './tags-input-interfaces';\r\nimport { UnAddedTagsPipe } from './un-added-tags.pipe';\r\nimport { DropdownComponent } from './dropdown/dropdown.component';\r\nexport declare class AngularTagsInputComponent implements OnInit, AfterViewInit, ControlValueAccessor, OnChanges, Validator {\r\n    private readonly sso;\r\n    private tagsService;\r\n    dropdown: DropdownComponent;\r\n    config: AngularTagsInputConfig;\r\n    tagsData: Array<any>;\r\n    disabled: boolean;\r\n    tagsLoading: boolean;\r\n    dropDownTemplate: TemplateRef<any>;\r\n    tagItemTemplate: TemplateRef<any>;\r\n    required: boolean;\r\n    tagRemoved: EventEmitter<any>;\r\n    tagAdded: EventEmitter<any>;\r\n    valueChanged: EventEmitter<any>;\r\n    itemClicked: EventEmitter<any>;\r\n    tagInput: TagInputComponent;\r\n    tags: Array<AngularTagItem>;\r\n    isInputFocused: boolean;\r\n    inputVal: string;\r\n    defaultConfig: AngularTagsInputConfig;\r\n    onChange: (items: AngularTagItem[]) => void;\r\n    dropdownOverlayPosition: {\r\n        offsetY: number;\r\n        originX: string;\r\n        originY: string;\r\n        overlayX: string;\r\n        overlayY: string;\r\n    }[];\r\n    ddScrollStrategy: ScrollStrategy;\r\n    isDropdownOpen: boolean;\r\n    dropdownShownYet: boolean;\r\n    unAddedTagsPipe: UnAddedTagsPipe;\r\n    constructor(sso: ScrollStrategyOptions, tagsService: AngularTagsInputService);\r\n    keyEvent(event: any): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    onFocusChange(val: boolean): void;\r\n    onInputValueChanged(val: string): void;\r\n    ngOnInit(): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Triggers when the value of the form control (or ngModel) is changed.\r\n     * We're using the handler to assign the values to the tags array that we have.\r\n     */\r\n    writeValue(tags: Array<any>): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Registers the on change function to the value accessor\r\n     */\r\n    registerOnChange(fn: any): void;\r\n    /**\r\n     * Validator function for the form control\r\n     * Doesn't do anything if the control is not required\r\n     * If it is required, checks if the control contains value\r\n     */\r\n    validate(control: FormControl): {\r\n        required: boolean;\r\n    };\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Triggers when the tag input is focused\r\n     */\r\n    onInputFocus(): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Shows the dropdown with options listing\r\n     */\r\n    showDropdown(recentTags?: Array<any>): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Hides the options listing dropdown\r\n     */\r\n    hideDropdown(): void;\r\n    removeKeyboardSelection(items: Array<AngularTagItem>): {\r\n        tiKeyboardActive: boolean;\r\n        newTag?: boolean;\r\n        tiSelected?: boolean;\r\n        tiIdentifier?: string;\r\n    }[];\r\n    ngAfterViewInit(): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Adds the tag in the tags list (tags array).\r\n     * Avoids duplicate tags addition\r\n     * @param tag - tag to add\r\n     */\r\n    addTag(tag: AngularTagItem): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Removes the tags from the tags list\r\n     * @param tag - tag to remove\r\n     */\r\n    removeTag(tag: AngularTagItem): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Triggers when the item is clicked from the dropdown\r\n     * @param tag - tag selected\r\n     */\r\n    onItemClicked(tag: AngularTagItem): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Removes the tag seleced state (and of the children)\r\n     * @param tag - the tag to unmark as selected\r\n     */\r\n    removeTagSelection(tag: AngularTagItem, ignoreChildren?: boolean, ignoreParent?: boolean): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc triggers on close button click of the tags\r\n     * @param tag - the tag to remove\r\n     */\r\n    tagCloseClicked(tag: any): void;\r\n    /**\r\n     * @author Ahsan Ayaz\r\n     * @desc Selects/adds the retated tags (parent and/or children)\r\n     * @param tag - the tag to mark as selected\r\n     */\r\n    selectRelatedTags(tag: AngularTagItem, ignoreChildren?: boolean, ignoreParent?: boolean): void;\r\n    registerOnTouched(fn: any): void;\r\n    inputKeyPress($event: any): void;\r\n}\r\nexport declare function getAngularTagsInputValueAccessor(): {\r\n    provide: import(\"@angular/core\").InjectionToken<ControlValueAccessor>;\r\n    useExisting: import(\"@angular/core\").Type<any>;\r\n    multi: boolean;\r\n};\r\nexport declare function getAngularTagsInputValidatorsProvider(): {\r\n    provide: import(\"@angular/core\").InjectionToken<(Function | Validator)[]>;\r\n    useExisting: import(\"@angular/core\").Type<any>;\r\n    multi: boolean;\r\n};\r\n"]}