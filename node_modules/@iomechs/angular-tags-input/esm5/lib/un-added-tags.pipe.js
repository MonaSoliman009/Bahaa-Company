import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
var UnAddedTagsPipe = /** @class */ (function () {
    function UnAddedTagsPipe() {
    }
    UnAddedTagsPipe.prototype.transform = function (tagsList, args) {
        var _this = this;
        var result = [];
        var tagsAdded = args.tagsAdded, config = args.config;
        // if the tagsList is falsy, return empty list
        if (!tagsList) {
            return [];
        }
        // if we have to show selected tags (adds selected: true to every item (or nested tag))
        if (config.showTagsSelectedInDD) {
            tagsList = this.setSelectedTags(tagsList, config, tagsAdded);
        }
        // if we don't have to hide tags, send the tagsList (final, processed) back
        if (!config.hideAddedTags) {
            return tagsList;
        }
        /**
         * if we have to filter out the already selected tags in the dropdown, we'll filter these out
         * and thus the already selected tags won't go back in the results for dropdown
         */
        for (var i = 0, len = tagsList.length; i < len; ++i) {
            var currentTagItem = tslib_1.__assign({}, tagsList[i]); // making sure we're not modifying the original object here
            if (!this.isTagAlreadySelected(currentTagItem, tagsAdded, config)) { // if the tag to add isn't added already
                currentTagItem.tiSelected = false;
                if (config.nestedTagProperty && currentTagItem[config.nestedTagProperty]) {
                    currentTagItem[config.nestedTagProperty] = currentTagItem[config.nestedTagProperty].filter(function (tagItem) {
                        return !_this.isTagAlreadySelected(tagItem, tagsAdded, config);
                    });
                }
                result.push(currentTagItem);
            }
        }
        return result;
    };
    /**
     * @author Ahsan Ayaz
     * @desc Compares a tag against all the tags added based on config provided
     * @param currentTag - the tag to check if it exists in the selection
     * @param tagsAdded - an array of the tags added to the selection
     * @param config - the config provided to the Angular Tags Input component
     * @return boolean - if the tag is added already
     */
    UnAddedTagsPipe.prototype.isTagAlreadySelected = function (currentTag, tagsAdded, config) {
        var _this = this;
        return tagsAdded.find(function (tagItem) {
            var matchFound = false;
            matchFound = _this.areTagsMatching(currentTag, tagItem, config);
            if (matchFound) {
                return true;
            }
            else if (tagItem[config.nestedTagProperty]) {
                return _this.isTagAlreadySelected(currentTag, tagItem[config.nestedTagProperty], config);
            }
            return false;
        });
    };
    /**
     * @author Ahsan Ayaz
     * @desc Compares the two tags based on the identifier provided in the config
     * @param currentTag - the tag in the iteration to compare
     * @param tagItem - the tag (already selected) to compare with
     * @param config - the config provided to the Angular Tags Input component
     * @return boolean - if the tags passed are the same.
     */
    UnAddedTagsPipe.prototype.areTagsMatching = function (currentTag, tagItem, config) {
        if (typeof tagItem[config.identifier] === 'number') {
            // handling if the type of identifier is a number
            return tagItem[config.identifier] === +currentTag[config.identifier];
        }
        else if (typeof tagItem[config.identifier] === 'string' && typeof currentTag[config.identifier] === 'string') {
            // handling if the type of identifier is a string
            return tagItem[config.identifier].toLowerCase() === currentTag[config.identifier].toLowerCase();
        }
    };
    UnAddedTagsPipe.prototype.setSelectedTags = function (tags, config, tagsAdded, isSelected) {
        var _this = this;
        if (isSelected === void 0) { isSelected = null; }
        return tags.map(function (currentTag) {
            currentTag.tiSelected = !!_this.isTagAlreadySelected(currentTag, tagsAdded, config);
            if (config.showTagsSelectedInDD && !!isSelected) {
                currentTag.tiSelected = true;
            }
            if (currentTag[config.nestedTagProperty] && currentTag[config.nestedTagProperty].length) {
                currentTag[config.nestedTagProperty] = _this.setSelectedTags(currentTag[config.nestedTagProperty], config, tagsAdded, currentTag.tiSelected);
            }
            return currentTag;
        });
    };
    UnAddedTagsPipe = tslib_1.__decorate([
        Pipe({
            name: 'unAddedTags'
        })
    ], UnAddedTagsPipe);
    return UnAddedTagsPipe;
}());
export { UnAddedTagsPipe };
//# sourceMappingURL=data:application/json;base64,