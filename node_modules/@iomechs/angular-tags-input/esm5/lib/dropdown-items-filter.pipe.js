import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
var DropdownItemsFilterPipe = /** @class */ (function () {
    function DropdownItemsFilterPipe() {
    }
    DropdownItemsFilterPipe.prototype.transform = function (tagItems, config, searchTerm) {
        var _this = this;
        if (tagItems === void 0) { tagItems = []; }
        if (searchTerm === void 0) { searchTerm = ''; }
        if (!searchTerm) {
            return tagItems;
        }
        return tslib_1.__spread(tagItems).map(function (item) { return _this.getFilteredItem(tslib_1.__assign({}, item), config, searchTerm); })
            .filter(function (item) { return !!item; });
    };
    DropdownItemsFilterPipe.prototype.getFilteredItem = function (item, config, searchTerm) {
        var _a;
        var _this = this;
        if (searchTerm === void 0) { searchTerm = ''; }
        if (searchTerm === '') {
            return item;
        }
        var matches = false;
        if (item[config.displayProperty].toLowerCase().includes(searchTerm.toLowerCase())) {
            return item;
        }
        if (item[config.nestedTagProperty]) {
            var childItems = item[config.nestedTagProperty].map(function (nestedItem) {
                return _this.getFilteredItem(nestedItem, config, searchTerm);
            }).filter(function (nestedItem) { return !!nestedItem; });
            matches = childItems.length > 0;
            if (matches) {
                return tslib_1.__assign({}, item, (_a = {}, _a[config.nestedTagProperty] = tslib_1.__spread(childItems), _a));
            }
        }
        return null;
    };
    DropdownItemsFilterPipe = tslib_1.__decorate([
        Pipe({
            name: 'dropdownItemsFilter'
        })
    ], DropdownItemsFilterPipe);
    return DropdownItemsFilterPipe;
}());
export { DropdownItemsFilterPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24taXRlbXMtZmlsdGVyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW9tZWNocy9hbmd1bGFyLXRhZ3MtaW5wdXQvIiwic291cmNlcyI6WyJsaWIvZHJvcGRvd24taXRlbXMtZmlsdGVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBTXBEO0lBQUE7SUFzQ0EsQ0FBQztJQXBDQywyQ0FBUyxHQUFULFVBQVUsUUFBb0MsRUFBRSxNQUE4QixFQUFFLFVBQWU7UUFBL0YsaUJBT0M7UUFQUyx5QkFBQSxFQUFBLGFBQW9DO1FBQWtDLDJCQUFBLEVBQUEsZUFBZTtRQUM3RixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxPQUFPLGlCQUFJLFFBQVEsRUFDaEIsR0FBRyxDQUFDLFVBQUMsSUFBb0IsSUFBSyxPQUFBLEtBQUksQ0FBQyxlQUFlLHNCQUFLLElBQUksR0FBRyxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQW5ELENBQW1ELENBQUM7YUFDbEYsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsaURBQWUsR0FBZixVQUFnQixJQUFvQixFQUFFLE1BQThCLEVBQUUsVUFBdUI7O1FBQTdGLGlCQXlCQztRQXpCcUUsMkJBQUEsRUFBQSxlQUF1QjtRQUMzRixJQUFJLFVBQVUsS0FBSyxFQUFFLEVBQUU7WUFDckIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxFQUFFO1lBQ2pGLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUNsQyxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsVUFBVTtnQkFDOUQsT0FBTyxLQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDOUQsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUEsVUFBVSxJQUFJLE9BQUEsQ0FBQyxDQUFDLFVBQVUsRUFBWixDQUFZLENBQUMsQ0FBQztZQUV0QyxPQUFPLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFFaEMsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsNEJBQ0ssSUFBSSxlQUNOLE1BQU0sQ0FBQyxpQkFBaUIscUJBQU8sVUFBVSxRQUMxQzthQUNIO1NBQ0Y7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFwQ1UsdUJBQXVCO1FBSG5DLElBQUksQ0FBQztZQUNKLElBQUksRUFBRSxxQkFBcUI7U0FDNUIsQ0FBQztPQUNXLHVCQUF1QixDQXNDbkM7SUFBRCw4QkFBQztDQUFBLEFBdENELElBc0NDO1NBdENZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJUYWdJdGVtLCBBbmd1bGFyVGFnc0lucHV0Q29uZmlnIH0gZnJvbSAnLi90YWdzLWlucHV0LWludGVyZmFjZXMnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdkcm9wZG93bkl0ZW1zRmlsdGVyJ1xufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93bkl0ZW1zRmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIHRyYW5zZm9ybSh0YWdJdGVtczogQXJyYXk8QW5ndWxhclRhZ0l0ZW0+ID0gW10sIGNvbmZpZzogQW5ndWxhclRhZ3NJbnB1dENvbmZpZywgc2VhcmNoVGVybSA9ICcnKTogYW55IHtcbiAgICBpZiAoIXNlYXJjaFRlcm0pIHtcbiAgICAgIHJldHVybiB0YWdJdGVtcztcbiAgICB9XG4gICAgcmV0dXJuIFsuLi50YWdJdGVtc11cbiAgICAgIC5tYXAoKGl0ZW06IEFuZ3VsYXJUYWdJdGVtKSA9PiB0aGlzLmdldEZpbHRlcmVkSXRlbSh7Li4uaXRlbX0sIGNvbmZpZywgc2VhcmNoVGVybSkpXG4gICAgICAuZmlsdGVyKGl0ZW0gPT4gISFpdGVtKTtcbiAgfVxuXG4gIGdldEZpbHRlcmVkSXRlbShpdGVtOiBBbmd1bGFyVGFnSXRlbSwgY29uZmlnOiBBbmd1bGFyVGFnc0lucHV0Q29uZmlnLCBzZWFyY2hUZXJtOiBzdHJpbmcgPSAnJykge1xuICAgIGlmIChzZWFyY2hUZXJtID09PSAnJykge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICAgIGxldCBtYXRjaGVzID0gZmFsc2U7XG4gICAgaWYgKGl0ZW1bY29uZmlnLmRpc3BsYXlQcm9wZXJ0eV0udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXJtLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbVtjb25maWcubmVzdGVkVGFnUHJvcGVydHldKSB7XG4gICAgICBjb25zdCBjaGlsZEl0ZW1zID0gaXRlbVtjb25maWcubmVzdGVkVGFnUHJvcGVydHldLm1hcChuZXN0ZWRJdGVtID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmlsdGVyZWRJdGVtKG5lc3RlZEl0ZW0sIGNvbmZpZywgc2VhcmNoVGVybSk7XG4gICAgICB9KS5maWx0ZXIobmVzdGVkSXRlbSA9PiAhIW5lc3RlZEl0ZW0pO1xuXG4gICAgICBtYXRjaGVzID0gY2hpbGRJdGVtcy5sZW5ndGggPiAwO1xuXG4gICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgW2NvbmZpZy5uZXN0ZWRUYWdQcm9wZXJ0eV06IFsuLi5jaGlsZEl0ZW1zXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbn1cbiJdfQ==