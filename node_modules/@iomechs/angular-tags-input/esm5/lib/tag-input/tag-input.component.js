import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
var TagInputComponent = /** @class */ (function () {
    function TagInputComponent() {
        this.inputClass = 'default';
        this.disabled = false;
        this.valueChanged = new EventEmitter();
        this.inputFocused = new EventEmitter();
        this.inputBlurred = new EventEmitter();
        this.tagEntered = new EventEmitter();
        this.tagInputForm = new FormGroup({
            tagInputVal: new FormControl('')
        });
    }
    TagInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.tagInputForm.get('tagInputVal')
            .valueChanges
            .pipe(debounceTime(400), distinctUntilChanged())
            .subscribe(function (value) {
            _this.lastValueEmitted = value;
            _this.valueChanged.emit(value);
        });
    };
    TagInputComponent.prototype.ngOnChanges = function (changes) {
        if (changes.disabled !== undefined) {
            if (changes.disabled.currentValue === true) {
                this.tagInputForm.get('tagInputVal').disable();
            }
            else {
                this.tagInputForm.get('tagInputVal').enable();
            }
        }
    };
    /**
     * @author Ahsan Ayaz
     * @desc Emits the input focused event with the current search term value
     */
    TagInputComponent.prototype.emitInputFocused = function () {
        if (this.disabled) {
            return;
        }
        var searchTerm = this.tagInputForm.get('tagInputVal').value;
        this.inputFocused.emit(searchTerm);
        if (this.lastValueEmitted !== searchTerm) {
            this.valueChanged.emit(searchTerm);
            this.lastValueEmitted = searchTerm;
        }
    };
    /**
     * @author Ahsan Ayaz
     * @desc When the user presses enter key after entering the tag name
     * @param inputEl - Reference to the input element so we can fetch the value
     */
    TagInputComponent.prototype.onEnterKeyPress = function () {
        var _a;
        if (this.config.onlyFromAutoComplete) {
            return;
        }
        var tagName = this.inputEl.nativeElement.value;
        this.tagEntered.emit((_a = {},
            _a[this.config.displayProperty] = tagName,
            _a[this.config.identifier] = tagName.toLowerCase(),
            _a.newTag = true,
            _a));
        this.resetInput();
    };
    /**
     * @author Ahsan Ayaz
     * @desc Resets the input value
     */
    TagInputComponent.prototype.resetInput = function () {
        this.inputEl.nativeElement.value = '';
    };
    TagInputComponent.prototype.emitInputBlurred = function ($event) {
        this.inputBlurred.emit($event);
    };
    tslib_1.__decorate([
        Input()
    ], TagInputComponent.prototype, "inputClass", void 0);
    tslib_1.__decorate([
        Input()
    ], TagInputComponent.prototype, "config", void 0);
    tslib_1.__decorate([
        Input()
    ], TagInputComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Output()
    ], TagInputComponent.prototype, "valueChanged", void 0);
    tslib_1.__decorate([
        Output()
    ], TagInputComponent.prototype, "inputFocused", void 0);
    tslib_1.__decorate([
        Output()
    ], TagInputComponent.prototype, "inputBlurred", void 0);
    tslib_1.__decorate([
        Output()
    ], TagInputComponent.prototype, "tagEntered", void 0);
    tslib_1.__decorate([
        ViewChild('inputEl', { static: true })
    ], TagInputComponent.prototype, "inputEl", void 0);
    TagInputComponent = tslib_1.__decorate([
        Component({
            selector: 'ti-tag-input',
            template: "<div class=\"angular-tag-input\" [ngClass]=\"inputClass + ''\">\n  <form no-validate [formGroup]=\"tagInputForm\">\n    <input\n      #inputEl\n      [disabled]=\"disabled\"\n      (keyup.enter)=\"onEnterKeyPress()\"\n      [placeholder]=\"config?.placeholder\"\n      formControlName=\"tagInputVal\"\n      (click)=\"emitInputFocused()\"\n      (focus)=\"emitInputFocused()\"\n      (blur)=\"emitInputBlurred($event)\"\n      class=\"angular-tag-input__input\"\n      autocomplete=\"off\">\n  </form>\n</div>\n",
            styles: [".default .angular-tag-input__input{padding:6px 10px;border:none;width:98%;min-width:100px}.angular-tag-input input:focus{outline-width:0}"]
        })
    ], TagInputComponent);
    return TagInputComponent;
}());
export { TagInputComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWlucHV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpb21lY2hzL2FuZ3VsYXItdGFncy1pbnB1dC8iLCJzb3VyY2VzIjpbImxpYi90YWctaW5wdXQvdGFnLWlucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQXdDLE1BQU0sZUFBZSxDQUFDO0FBRWhJLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBT3BFO0lBYUU7UUFaUyxlQUFVLEdBQUcsU0FBUyxDQUFDO1FBRXZCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDaEIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQzFDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUMxQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDMUMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBRTFELGlCQUFZLEdBQUcsSUFBSSxTQUFTLENBQUM7WUFDM0IsV0FBVyxFQUFFLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQztTQUNqQyxDQUFDLENBQUM7SUFFYSxDQUFDO0lBRWpCLG9DQUFRLEdBQVI7UUFBQSxpQkFXQztRQVZDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQzthQUNqQyxZQUFZO2FBQ1osSUFBSSxDQUNILFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsb0JBQW9CLEVBQUUsQ0FDdkI7YUFDQSxTQUFTLENBQUMsVUFBQyxLQUFLO1lBQ2YsS0FBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztZQUM5QixLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCx1Q0FBVyxHQUFYLFVBQVksT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUNsQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBWSxLQUFLLElBQUksRUFBRTtnQkFDMUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDaEQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7YUFDL0M7U0FDRjtJQUNILENBQUM7SUFFRDs7O09BR0c7SUFDSCw0Q0FBZ0IsR0FBaEI7UUFDRSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsT0FBTztTQUNSO1FBQ0QsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzlELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRW5DLElBQUksSUFBSSxDQUFDLGdCQUFnQixLQUFLLFVBQVUsRUFBRTtZQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCwyQ0FBZSxHQUFmOztRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRTtZQUNwQyxPQUFPO1NBQ1I7UUFDRCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJO1lBQ2xCLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLElBQUcsT0FBTztZQUN0QyxHQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFHLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDL0MsU0FBTSxHQUFFLElBQUk7Z0JBQ1osQ0FBQztRQUNILElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsc0NBQVUsR0FBVjtRQUNFLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELDRDQUFnQixHQUFoQixVQUFpQixNQUFNO1FBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFsRlE7UUFBUixLQUFLLEVBQUU7eURBQXdCO0lBQ3ZCO1FBQVIsS0FBSyxFQUFFO3FEQUFnQztJQUMvQjtRQUFSLEtBQUssRUFBRTt1REFBa0I7SUFDaEI7UUFBVCxNQUFNLEVBQUU7MkRBQTJDO0lBQzFDO1FBQVQsTUFBTSxFQUFFOzJEQUEyQztJQUMxQztRQUFULE1BQU0sRUFBRTsyREFBMkM7SUFDMUM7UUFBVCxNQUFNLEVBQUU7eURBQWlEO0lBQ2xCO1FBQXZDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7c0RBQXFCO0lBUmpELGlCQUFpQjtRQUw3QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsY0FBYztZQUN4QiwyZ0JBQXlDOztTQUUxQyxDQUFDO09BQ1csaUJBQWlCLENBb0Y3QjtJQUFELHdCQUFDO0NBQUEsQUFwRkQsSUFvRkM7U0FwRlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJUYWdJdGVtLCBBbmd1bGFyVGFnc0lucHV0Q29uZmlnIH0gZnJvbSAnLi4vdGFncy1pbnB1dC1pbnRlcmZhY2VzJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aS10YWctaW5wdXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFnLWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFnLWlucHV0LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGFnSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGlucHV0Q2xhc3MgPSAnZGVmYXVsdCc7XG4gIEBJbnB1dCgpIGNvbmZpZzogQW5ndWxhclRhZ3NJbnB1dENvbmZpZztcbiAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcbiAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBAT3V0cHV0KCkgaW5wdXRGb2N1c2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIEBPdXRwdXQoKSBpbnB1dEJsdXJyZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQE91dHB1dCgpIHRhZ0VudGVyZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEFuZ3VsYXJUYWdJdGVtPigpO1xuICBAVmlld0NoaWxkKCdpbnB1dEVsJywgeyBzdGF0aWM6IHRydWUgfSkgaW5wdXRFbDogRWxlbWVudFJlZjtcbiAgdGFnSW5wdXRGb3JtID0gbmV3IEZvcm1Hcm91cCh7XG4gICAgdGFnSW5wdXRWYWw6IG5ldyBGb3JtQ29udHJvbCgnJylcbiAgfSk7XG4gIGxhc3RWYWx1ZUVtaXR0ZWQ6IHN0cmluZztcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnRhZ0lucHV0Rm9ybS5nZXQoJ3RhZ0lucHV0VmFsJylcbiAgICAgIC52YWx1ZUNoYW5nZXNcbiAgICAgIC5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUoNDAwKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy5sYXN0VmFsdWVFbWl0dGVkID0gdmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQodmFsdWUpO1xuICAgICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuZGlzYWJsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNoYW5nZXMuZGlzYWJsZWQuY3VycmVudFZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMudGFnSW5wdXRGb3JtLmdldCgndGFnSW5wdXRWYWwnKS5kaXNhYmxlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRhZ0lucHV0Rm9ybS5nZXQoJ3RhZ0lucHV0VmFsJykuZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBhdXRob3IgQWhzYW4gQXlhelxuICAgKiBAZGVzYyBFbWl0cyB0aGUgaW5wdXQgZm9jdXNlZCBldmVudCB3aXRoIHRoZSBjdXJyZW50IHNlYXJjaCB0ZXJtIHZhbHVlXG4gICAqL1xuICBlbWl0SW5wdXRGb2N1c2VkKCkge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlYXJjaFRlcm0gPSB0aGlzLnRhZ0lucHV0Rm9ybS5nZXQoJ3RhZ0lucHV0VmFsJykudmFsdWU7XG4gICAgdGhpcy5pbnB1dEZvY3VzZWQuZW1pdChzZWFyY2hUZXJtKTtcblxuICAgIGlmICh0aGlzLmxhc3RWYWx1ZUVtaXR0ZWQgIT09IHNlYXJjaFRlcm0pIHtcbiAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQoc2VhcmNoVGVybSk7XG4gICAgICB0aGlzLmxhc3RWYWx1ZUVtaXR0ZWQgPSBzZWFyY2hUZXJtO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICogQGRlc2MgV2hlbiB0aGUgdXNlciBwcmVzc2VzIGVudGVyIGtleSBhZnRlciBlbnRlcmluZyB0aGUgdGFnIG5hbWVcbiAgICogQHBhcmFtIGlucHV0RWwgLSBSZWZlcmVuY2UgdG8gdGhlIGlucHV0IGVsZW1lbnQgc28gd2UgY2FuIGZldGNoIHRoZSB2YWx1ZVxuICAgKi9cbiAgb25FbnRlcktleVByZXNzKCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy5vbmx5RnJvbUF1dG9Db21wbGV0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YWdOYW1lID0gdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgdGhpcy50YWdFbnRlcmVkLmVtaXQoe1xuICAgICAgW3RoaXMuY29uZmlnLmRpc3BsYXlQcm9wZXJ0eV06IHRhZ05hbWUsXG4gICAgICBbdGhpcy5jb25maWcuaWRlbnRpZmllcl06IHRhZ05hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgIG5ld1RhZzogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMucmVzZXRJbnB1dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBhdXRob3IgQWhzYW4gQXlhelxuICAgKiBAZGVzYyBSZXNldHMgdGhlIGlucHV0IHZhbHVlXG4gICAqL1xuICByZXNldElucHV0KCkge1xuICAgIHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gJyc7XG4gIH1cblxuICBlbWl0SW5wdXRCbHVycmVkKCRldmVudCkge1xuICAgIHRoaXMuaW5wdXRCbHVycmVkLmVtaXQoJGV2ZW50KTtcbiAgfVxufVxuIl19