import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var AngularTagsInputService = /** @class */ (function () {
    function AngularTagsInputService() {
        this.debugMode = false;
    }
    /**
     * @author Ahsan Ayaz
     * @desc Finds a tag by Id
     * @param tagsData Array of the tags (could be heirarchical)
     * @param tagId identifier of the tag to be found
     * @param config the tags input config
     * @returns the tag found, or `undefined`
     */
    AngularTagsInputService.prototype.findTagById = function (tagsData, tagId, config) {
        for (var i = 0, len = tagsData.length; i < len; ++i) {
            // tslint:disable-next-line:triple-equals
            if (tagsData[i][config.identifier] == tagId) {
                return tagsData[i];
            }
            if (tagsData[i][config.nestedTagProperty]) {
                var nestedParentFound = this.findTagById(tagsData[i][config.nestedTagProperty], tagId, config);
                if (nestedParentFound) {
                    return nestedParentFound;
                }
            }
        }
    };
    AngularTagsInputService.prototype.setDebugMode = function (mode) {
        this.debugMode = mode;
    };
    AngularTagsInputService.prototype.log = function (logMessage, logLabel) {
        if (logLabel === void 0) { logLabel = ''; }
        if (!this.debugMode) {
            return;
        }
        console.log(logLabel, logMessage);
    };
    AngularTagsInputService.prototype.findParent = function (tagsArray, tagItem, config) {
        for (var i = 0, len = tagsArray.length; i < len; ++i) {
            // tslint:disable-next-line:triple-equals
            if (tagsArray[i][config.identifier] == tagItem[config.identifier]) {
                return tagsArray[i];
            }
            if (tagsArray[i][config.nestedTagProperty]) {
                var nestedParentFound = this.findParent(tagsArray[i][config.nestedTagProperty], tagItem, config);
                if (nestedParentFound) {
                    return nestedParentFound;
                }
            }
        }
    };
    AngularTagsInputService.prototype.getMainTagAfterAdding = function (tagsArray, tagAdded, tags, config) {
        if (tagAdded[config.nestedTagParentProp]) {
            var parentTag = this.findTagById(tagsArray, tagAdded[config.nestedTagParentProp], config);
            if (!parentTag) {
                return;
            }
            var parentTagChildren = parentTag[config.nestedTagProperty].length;
            var childrensSelected = parentTag[config.nestedTagProperty].filter(function (tagItem) {
                // tslint:disable-next-line:triple-equals
                return !!tagItem.tiSelected;
            }).length;
            if (parentTagChildren > 0 && childrensSelected > 0 && childrensSelected === parentTagChildren) {
                parentTag.tiSelected = true;
                if (!parentTag[config.nestedTagParentProp]) {
                    return parentTag;
                }
                else {
                    return this.getMainTagAfterAdding(tagsArray, parentTag, tags, config);
                }
            }
        }
        return tagAdded;
    };
    AngularTagsInputService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AngularTagsInputService_Factory() { return new AngularTagsInputService(); }, token: AngularTagsInputService, providedIn: "root" });
    AngularTagsInputService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], AngularTagsInputService);
    return AngularTagsInputService;
}());
export { AngularTagsInputService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci10YWdzLWlucHV0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW9tZWNocy9hbmd1bGFyLXRhZ3MtaW5wdXQvIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci10YWdzLWlucHV0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNDO0lBRUU7UUFEQSxjQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ0YsQ0FBQztJQUVqQjs7Ozs7OztPQU9HO0lBQ0gsNkNBQVcsR0FBWCxVQUFZLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBOEI7UUFDekQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUNuRCx5Q0FBeUM7WUFDekMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssRUFBRTtnQkFDM0MsT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEI7WUFDRCxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtnQkFDekMsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ2pHLElBQUksaUJBQWlCLEVBQUU7b0JBQ3JCLE9BQU8saUJBQWlCLENBQUM7aUJBQzFCO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFFRCw4Q0FBWSxHQUFaLFVBQWEsSUFBYTtRQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDO0lBRUQscUNBQUcsR0FBSCxVQUFJLFVBQWUsRUFBRSxRQUFhO1FBQWIseUJBQUEsRUFBQSxhQUFhO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLE9BQU87U0FDUjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCw0Q0FBVSxHQUFWLFVBQVcsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUE4QjtRQUMzRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1lBQ3BELHlDQUF5QztZQUN6QyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRTtnQkFDakUsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckI7WUFDRCxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtnQkFDMUMsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ25HLElBQUksaUJBQWlCLEVBQUU7b0JBQ3JCLE9BQU8saUJBQWlCLENBQUM7aUJBQzFCO2FBQ0Y7U0FDRjtJQUNILENBQUM7SUFFRCx1REFBcUIsR0FBckIsVUFBc0IsU0FBUyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBOEI7UUFDN0UsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFDeEMsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FDaEMsU0FBUyxFQUNULFFBQVEsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFDcEMsTUFBTSxDQUNQLENBQUM7WUFDRixJQUFJLENBQUMsU0FBUyxFQUFFO2dCQUNkLE9BQU87YUFDUjtZQUNELElBQU0saUJBQWlCLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUNyRSxJQUFNLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxPQUFPO2dCQUMzRSx5Q0FBeUM7Z0JBQ3pDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7WUFDOUIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ1YsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxJQUFJLGlCQUFpQixLQUFLLGlCQUFpQixFQUFFO2dCQUM3RixTQUFTLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFBRTtvQkFDMUMsT0FBTyxTQUFTLENBQUM7aUJBQ2xCO3FCQUFNO29CQUNMLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUN2RTthQUNGO1NBQ0Y7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOztJQTlFVSx1QkFBdUI7UUFIbkMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLHVCQUF1QixDQStFbkM7a0NBckZEO0NBcUZDLEFBL0VELElBK0VDO1NBL0VZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJUYWdzSW5wdXRDb25maWcgfSBmcm9tICcuL3RhZ3MtaW5wdXQtaW50ZXJmYWNlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJUYWdzSW5wdXRTZXJ2aWNlIHtcbiAgZGVidWdNb2RlID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgLyoqXG4gICAqIEBhdXRob3IgQWhzYW4gQXlhelxuICAgKiBAZGVzYyBGaW5kcyBhIHRhZyBieSBJZFxuICAgKiBAcGFyYW0gdGFnc0RhdGEgQXJyYXkgb2YgdGhlIHRhZ3MgKGNvdWxkIGJlIGhlaXJhcmNoaWNhbClcbiAgICogQHBhcmFtIHRhZ0lkIGlkZW50aWZpZXIgb2YgdGhlIHRhZyB0byBiZSBmb3VuZFxuICAgKiBAcGFyYW0gY29uZmlnIHRoZSB0YWdzIGlucHV0IGNvbmZpZ1xuICAgKiBAcmV0dXJucyB0aGUgdGFnIGZvdW5kLCBvciBgdW5kZWZpbmVkYFxuICAgKi9cbiAgZmluZFRhZ0J5SWQodGFnc0RhdGEsIHRhZ0lkLCBjb25maWc6IEFuZ3VsYXJUYWdzSW5wdXRDb25maWcpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGFnc0RhdGEubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0cmlwbGUtZXF1YWxzXG4gICAgICBpZiAodGFnc0RhdGFbaV1bY29uZmlnLmlkZW50aWZpZXJdID09IHRhZ0lkKSB7XG4gICAgICAgIHJldHVybiB0YWdzRGF0YVtpXTtcbiAgICAgIH1cbiAgICAgIGlmICh0YWdzRGF0YVtpXVtjb25maWcubmVzdGVkVGFnUHJvcGVydHldKSB7XG4gICAgICAgIGNvbnN0IG5lc3RlZFBhcmVudEZvdW5kID0gdGhpcy5maW5kVGFnQnlJZCh0YWdzRGF0YVtpXVtjb25maWcubmVzdGVkVGFnUHJvcGVydHldLCB0YWdJZCwgY29uZmlnKTtcbiAgICAgICAgaWYgKG5lc3RlZFBhcmVudEZvdW5kKSB7XG4gICAgICAgICAgcmV0dXJuIG5lc3RlZFBhcmVudEZvdW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2V0RGVidWdNb2RlKG1vZGU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmRlYnVnTW9kZSA9IG1vZGU7XG4gIH1cblxuICBsb2cobG9nTWVzc2FnZTogYW55LCBsb2dMYWJlbCA9ICcnKSB7XG4gICAgaWYgKCF0aGlzLmRlYnVnTW9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhsb2dMYWJlbCwgbG9nTWVzc2FnZSk7XG4gIH1cblxuICBmaW5kUGFyZW50KHRhZ3NBcnJheSwgdGFnSXRlbSwgY29uZmlnOiBBbmd1bGFyVGFnc0lucHV0Q29uZmlnKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRhZ3NBcnJheS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcbiAgICAgIGlmICh0YWdzQXJyYXlbaV1bY29uZmlnLmlkZW50aWZpZXJdID09IHRhZ0l0ZW1bY29uZmlnLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIHJldHVybiB0YWdzQXJyYXlbaV07XG4gICAgICB9XG4gICAgICBpZiAodGFnc0FycmF5W2ldW2NvbmZpZy5uZXN0ZWRUYWdQcm9wZXJ0eV0pIHtcbiAgICAgICAgY29uc3QgbmVzdGVkUGFyZW50Rm91bmQgPSB0aGlzLmZpbmRQYXJlbnQodGFnc0FycmF5W2ldW2NvbmZpZy5uZXN0ZWRUYWdQcm9wZXJ0eV0sIHRhZ0l0ZW0sIGNvbmZpZyk7XG4gICAgICAgIGlmIChuZXN0ZWRQYXJlbnRGb3VuZCkge1xuICAgICAgICAgIHJldHVybiBuZXN0ZWRQYXJlbnRGb3VuZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldE1haW5UYWdBZnRlckFkZGluZyh0YWdzQXJyYXksIHRhZ0FkZGVkLCB0YWdzLCBjb25maWc6IEFuZ3VsYXJUYWdzSW5wdXRDb25maWcpIHtcbiAgICBpZiAodGFnQWRkZWRbY29uZmlnLm5lc3RlZFRhZ1BhcmVudFByb3BdKSB7XG4gICAgICBjb25zdCBwYXJlbnRUYWcgPSB0aGlzLmZpbmRUYWdCeUlkKFxuICAgICAgICB0YWdzQXJyYXksXG4gICAgICAgIHRhZ0FkZGVkW2NvbmZpZy5uZXN0ZWRUYWdQYXJlbnRQcm9wXSxcbiAgICAgICAgY29uZmlnXG4gICAgICApO1xuICAgICAgaWYgKCFwYXJlbnRUYWcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyZW50VGFnQ2hpbGRyZW4gPSBwYXJlbnRUYWdbY29uZmlnLm5lc3RlZFRhZ1Byb3BlcnR5XS5sZW5ndGg7XG4gICAgICBjb25zdCBjaGlsZHJlbnNTZWxlY3RlZCA9IHBhcmVudFRhZ1tjb25maWcubmVzdGVkVGFnUHJvcGVydHldLmZpbHRlcigodGFnSXRlbSkgPT4ge1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xuICAgICAgICByZXR1cm4gISF0YWdJdGVtLnRpU2VsZWN0ZWQ7XG4gICAgICB9KS5sZW5ndGg7XG4gICAgICBpZiAocGFyZW50VGFnQ2hpbGRyZW4gPiAwICYmIGNoaWxkcmVuc1NlbGVjdGVkID4gMCAmJiBjaGlsZHJlbnNTZWxlY3RlZCA9PT0gcGFyZW50VGFnQ2hpbGRyZW4pIHtcbiAgICAgICAgcGFyZW50VGFnLnRpU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIXBhcmVudFRhZ1tjb25maWcubmVzdGVkVGFnUGFyZW50UHJvcF0pIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50VGFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldE1haW5UYWdBZnRlckFkZGluZyh0YWdzQXJyYXksIHBhcmVudFRhZywgdGFncywgY29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFnQWRkZWQ7XG4gIH1cbn1cbiJdfQ==