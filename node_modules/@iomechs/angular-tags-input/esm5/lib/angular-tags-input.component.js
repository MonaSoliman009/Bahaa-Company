import * as tslib_1 from "tslib";
import { ScrollStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { Component, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, HostListener, } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { AngularTagsInputService } from './angular-tags-input.service';
import { TagInputComponent } from './tag-input/tag-input.component';
import { UnAddedTagsPipe } from './un-added-tags.pipe';
import { DropdownComponent } from './dropdown/dropdown.component';
import { KEY_CODES } from './constants';
var AngularTagsInputComponent = /** @class */ (function () {
    function AngularTagsInputComponent(sso, tagsService) {
        this.sso = sso;
        this.tagsService = tagsService;
        this.tagsData = [];
        this.disabled = false;
        this.dropDownTemplate = null;
        this.tagItemTemplate = null;
        this.required = false;
        this.tagRemoved = new EventEmitter();
        this.tagAdded = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.itemClicked = new EventEmitter();
        this.tags = [];
        this.defaultConfig = {
            defaultClass: 'angular-tags-input',
            additionalClasses: '',
            displayProperty: 'value',
            identifier: 'id',
            onlyFromAutoComplete: false,
            placeholder: 'Search',
            hideAddedTags: true,
            nestedTagProperty: '',
            showTagsSelectedInDD: false,
            hideTags: false,
            maxItems: null,
            nestedTagParentProp: '',
            keyboardActiveClass: 'angular-tags-dropdown__list__item--active'
        };
        this.dropdownOverlayPosition = [
            { offsetY: 12, originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },
            { offsetY: -28, originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },
            { offsetY: 28, originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },
            { offsetY: -28, originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom' },
        ];
        this.unAddedTagsPipe = new UnAddedTagsPipe();
    }
    AngularTagsInputComponent.prototype.keyEvent = function (event) {
        this.inputKeyPress(event);
    };
    AngularTagsInputComponent.prototype.ngOnChanges = function (changes) {
        // if there's no change in the tagsData, do nothing
        if (!changes.tagsData || !this.isInputFocused) {
            return;
        }
        // If the previous walue was `null` or `undefined`, we're initializing that as an array here
        // so we can avoid breaking the process further.
        if (!changes.tagsData.previousValue) {
            changes.tagsData.previousValue = [];
        }
        // if we have the value of the tags changed, we need to show the dropdown immediately
        // we don't show this on the first change, because that's when the first value is assigned
        if (changes.tagsData && changes.tagsData.currentValue !== changes.tagsData.previousValue
            && !changes.tagsData.firstChange) {
            // if the values don't match, show the dropdown
            if (changes.tagsData.currentValue.length !== changes.tagsData.previousValue.length && !!this.dropdownShownYet) {
                return this.showDropdown(changes.tagsData.currentValue);
            }
            if (changes.tagsData.previousValue.length === 0) {
                return;
            }
            /* since the values are array, we need to compare the elements within
             * avoiding the usage of any external library, matching the elements using identifier
             * of the elements here
             */
            for (var i = 0, len = changes.tagsData.currentValue.length; i < len; ++i) {
                if (changes.tagsData.currentValue[i][this.config.identifier] !== changes.tagsData.previousValue[i][this.config.identifier]) {
                    // as soon as the difference in elements is found, show the element and stop further execution of for loop
                    return this.showDropdown(changes.tagsData.currentValue);
                }
            }
        }
    };
    AngularTagsInputComponent.prototype.onFocusChange = function (val) {
        var _this = this;
        this.isInputFocused = val;
        if (!val && this.config.hideDDOnBlur) {
            setTimeout(function () {
                _this.hideDropdown();
            }, 400);
        }
    };
    AngularTagsInputComponent.prototype.onInputValueChanged = function (val) {
        this.inputVal = val;
        this.valueChanged.emit(val);
    };
    AngularTagsInputComponent.prototype.ngOnInit = function () {
        this.config = tslib_1.__assign({}, this.defaultConfig, this.config);
        this.ddScrollStrategy = this.sso.reposition();
    };
    /**
     * @author Ahsan Ayaz
     * @desc Triggers when the value of the form control (or ngModel) is changed.
     * We're using the handler to assign the values to the tags array that we have.
     */
    AngularTagsInputComponent.prototype.writeValue = function (tags) {
        var _this = this;
        tags = tags ? tags : [];
        tags = Array.isArray(tags) ? tags : [tags];
        this.tags = tags.map(function (tag) {
            var _a;
            return tslib_1.__assign({}, tag, (_a = {},
                _a[_this.config.identifier] = tag[_this.config.identifier],
                _a[_this.config.displayProperty] = tag[_this.config.displayProperty],
                _a));
        });
        if (this.config.showTagsSelectedInDD) {
            setTimeout(function () {
                _this.tags.map(function (tag) {
                    _this.selectRelatedTags(tag);
                });
            });
        }
    };
    /**
     * @author Ahsan Ayaz
     * @desc Registers the on change function to the value accessor
     */
    AngularTagsInputComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    /**
     * Validator function for the form control
     * Doesn't do anything if the control is not required
     * If it is required, checks if the control contains value
     */
    AngularTagsInputComponent.prototype.validate = function (control) {
        if (this.required === false) {
            return null;
        }
        return (!!control.value && control.value.length) ? null : {
            required: true,
        };
    };
    /**
     * @author Ahsan Ayaz
     * @desc Triggers when the tag input is focused
     */
    AngularTagsInputComponent.prototype.onInputFocus = function () {
        if (this.config.clearInputOnFocus) {
            if (this.tagInput.lastValueEmitted !== '') {
                this.tagInput.tagInputForm.get('tagInputVal').setValue('');
            }
            this.tagInput.resetInput();
        }
        if (this.config.clearTagsOnFocus) {
            this.tags.length = 0;
        }
        this.showDropdown();
        this.onFocusChange(true);
    };
    /**
     * @author Ahsan Ayaz
     * @desc Shows the dropdown with options listing
     */
    AngularTagsInputComponent.prototype.showDropdown = function (recentTags) {
        if (recentTags === void 0) { recentTags = null; }
        var unAddedTags = this.unAddedTagsPipe.transform(!!recentTags ? recentTags : this.tagsData, {
            tagsAdded: this.tags,
            config: this.config
        });
        if (unAddedTags.length) { // only show dropdown when we have data to show
            this.isDropdownOpen = true;
        }
        if (!this.dropdownShownYet) {
            this.dropdownShownYet = true;
        }
    };
    /**
     * @author Ahsan Ayaz
     * @desc Hides the options listing dropdown
     */
    AngularTagsInputComponent.prototype.hideDropdown = function () {
        this.isDropdownOpen = false;
        this.tagsData = this.removeKeyboardSelection(this.tagsData);
    };
    AngularTagsInputComponent.prototype.removeKeyboardSelection = function (items) {
        var _this = this;
        return items.map(function (tag) {
            if (tag[_this.config.nestedTagProperty] && tag[_this.config.nestedTagProperty].length) {
                tag[_this.config.nestedTagProperty] = _this.removeKeyboardSelection(tag[_this.config.nestedTagProperty]);
            }
            return tslib_1.__assign({}, tag, { tiKeyboardActive: false });
        });
    };
    AngularTagsInputComponent.prototype.ngAfterViewInit = function () {
        if (!!this.config || !this.onChange) {
            console.warn('Please use ngModel or FormControlName with <ti-angular-tags-input>');
        }
        if (this.config.nestedTagProperty) {
            // we need the parent property to be able to unselect the parent when a child tag is unselected
            if (!this.config.nestedTagParentProp) {
                // tslint:disable-next-line:max-line-length
                throw new Error('nestedTagProperty provided but nestedTagParentProp not provided.\nThis will cause the parent tag to not remove if any of the children is removed');
            }
        }
    };
    /**
     * @author Ahsan Ayaz
     * @desc Adds the tag in the tags list (tags array).
     * Avoids duplicate tags addition
     * @param tag - tag to add
     */
    AngularTagsInputComponent.prototype.addTag = function (tag) {
        var _this = this;
        if (this.config.showTagsSelectedInDD) {
            tag.tiSelected = true; // marks the element as selected
        }
        if (this.config.maxItems > 0 && this.tags.length === this.config.maxItems) {
            return;
        }
        if (!this.tags.find(function (tagItem) { return tagItem[_this.config.identifier] === tag[_this.config.identifier]; })) {
            this.tags = tslib_1.__spread(this.tags, [tag]);
            this.onChange(this.tags);
        }
    };
    /**
     * @author Ahsan Ayaz
     * @desc Removes the tags from the tags list
     * @param tag - tag to remove
     */
    AngularTagsInputComponent.prototype.removeTag = function (tag) {
        var _this = this;
        this.tags = this.tags.filter(function (tagItem) { return tagItem[_this.config.identifier] !== tag[_this.config.identifier]; });
        // when we've removed all the tags, we want to get the default tags
        if (this.tags.length === 0) {
            this.tagInput.resetInput();
            this.valueChanged.emit('');
        }
        this.onChange(this.tags);
    };
    /**
     * @author Ahsan Ayaz
     * @desc Triggers when the item is clicked from the dropdown
     * @param tag - tag selected
     */
    AngularTagsInputComponent.prototype.onItemClicked = function (tag) {
        var _this = this;
        // if we don't have to toggle, add the item as tag right away
        if (this.config.toggleSelectionOnClick) {
            // we have to toggle selection. First, let's see if the tag doesn't exist already in the selected tags
            if (!tag.tiSelected && !this.tags.find(function (tagItem) { return tagItem[_this.config.identifier] === tag[_this.config.identifier]; })) {
                this.addTag(tag);
                this.selectRelatedTags(tag);
                this.tagAdded.emit(this.tagsService.getMainTagAfterAdding(this.tagsData, tag, this.tags, this.config));
            }
            else { // if the tag is already selected, remove
                this.removeTag(tag);
                this.removeTagSelection(tag);
                this.tagRemoved.emit(tag);
            }
        }
        else {
            this.addTag(tag);
            this.selectRelatedTags(tag);
            this.tagAdded.emit(this.tagsService.getMainTagAfterAdding(this.tagsData, tag, this.tags, this.config));
        }
        this.tagInput.resetInput();
        this.itemClicked.emit(tag);
        this.hideDropdown();
    };
    /**
     * @author Ahsan Ayaz
     * @desc Removes the tag seleced state (and of the children)
     * @param tag - the tag to unmark as selected
     */
    AngularTagsInputComponent.prototype.removeTagSelection = function (tag, ignoreChildren, ignoreParent) {
        var _this = this;
        if (ignoreChildren === void 0) { ignoreChildren = false; }
        if (ignoreParent === void 0) { ignoreParent = false; }
        tag.tiSelected = false;
        if (!ignoreChildren && tag[this.config.nestedTagProperty]) {
            for (var i = 0, len = tag[this.config.nestedTagProperty].length; i < len; ++i) {
                this.removeTag(tag[this.config.nestedTagProperty][i]);
                this.removeTagSelection(tag[this.config.nestedTagProperty][i], ignoreChildren);
            }
        }
        if (tag[this.config.nestedTagParentProp] && !ignoreParent) {
            var parentTag = this.tagsService.findTagById(this.tagsData, tag[this.config.nestedTagParentProp], this.config);
            if (parentTag && parentTag.tiSelected) {
                this.removeTag(parentTag);
                this.removeTagSelection(parentTag, true, ignoreParent);
                parentTag[this.config.nestedTagProperty].map(function (tagItem) {
                    // tslint:disable-next-line:triple-equals
                    if (tagItem[_this.config.identifier] != tag[_this.config.identifier]) {
                        _this.addTag(tagItem);
                        _this.selectRelatedTags(tagItem, false, true);
                    }
                });
            }
        }
        this.onChange(this.tags);
    };
    /**
     * @author Ahsan Ayaz
     * @desc triggers on close button click of the tags
     * @param tag - the tag to remove
     */
    AngularTagsInputComponent.prototype.tagCloseClicked = function (tag) {
        this.tagRemoved.emit(tag);
        this.removeTag(tag);
        this.removeTagSelection(tag);
    };
    /**
     * @author Ahsan Ayaz
     * @desc Selects/adds the retated tags (parent and/or children)
     * @param tag - the tag to mark as selected
     */
    AngularTagsInputComponent.prototype.selectRelatedTags = function (tag, ignoreChildren, ignoreParent) {
        var _this = this;
        if (ignoreChildren === void 0) { ignoreChildren = false; }
        if (ignoreParent === void 0) { ignoreParent = false; }
        if (this.config.showTagsSelectedInDD) {
            tag.tiSelected = true;
        }
        if (tag[this.config.nestedTagProperty] && !ignoreChildren) {
            for (var i = 0, len = tag[this.config.nestedTagProperty].length; i < len; ++i) {
                if (this.config.showParentTagsOnly) {
                    // remove the children if we only have to keep parent
                    this.removeTag(tag[this.config.nestedTagProperty][i]);
                    // making sure we're targeting only children, ignoring parents
                    this.selectRelatedTags(tag[this.config.nestedTagProperty][i], false, true);
                }
                else {
                    this.addTag(tag[this.config.nestedTagProperty][i]);
                }
            }
        }
        if (tag[this.config.nestedTagParentProp] && !ignoreParent) {
            var parentTag_1 = this.tagsService.findTagById(this.tagsData, tag[this.config.nestedTagParentProp], this.config);
            if (!parentTag_1) {
                return;
            }
            var parentTagChildren = parentTag_1[this.config.nestedTagProperty].length;
            var childrensSelected = this.tags.filter(function (tagItem) {
                // tslint:disable-next-line:triple-equals
                return tagItem[_this.config.nestedTagParentProp] == parentTag_1[_this.config.identifier];
            }).length;
            if ((parentTagChildren > 0 && childrensSelected > 0) &&
                (this.config.childrenCountProperty ?
                    childrensSelected === parentTag_1[this.config.childrenCountProperty] :
                    childrensSelected === parentTagChildren)) {
                this.addTag(parentTag_1);
                this.selectRelatedTags(parentTag_1, false, false);
            }
        }
        this.onChange(this.tags);
    };
    AngularTagsInputComponent.prototype.registerOnTouched = function (fn) {
        // throw new Error("Method not implemented.");
    };
    AngularTagsInputComponent.prototype.inputKeyPress = function ($event) {
        var _this = this;
        $event.stopImmediatePropagation();
        if (!this.isDropdownOpen &&
            ($event.key === KEY_CODES.ARROW_UP ||
                $event.key === KEY_CODES.ARROW_DOWN)) {
            this.isDropdownOpen = true;
        }
        else if (this.isDropdownOpen &&
            $event.key === KEY_CODES.ESCAPE) {
            return this.hideDropdown();
        }
        // so we have the dropdown shown
        setTimeout(function () {
            if (_this.dropdown) {
                _this.dropdown.handleKeyUp($event);
            }
        }, 10);
    };
    AngularTagsInputComponent.ctorParameters = function () { return [
        { type: ScrollStrategyOptions },
        { type: AngularTagsInputService }
    ]; };
    tslib_1.__decorate([
        ViewChild(DropdownComponent, { static: false })
    ], AngularTagsInputComponent.prototype, "dropdown", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularTagsInputComponent.prototype, "config", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularTagsInputComponent.prototype, "tagsData", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularTagsInputComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularTagsInputComponent.prototype, "tagsLoading", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularTagsInputComponent.prototype, "dropDownTemplate", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularTagsInputComponent.prototype, "tagItemTemplate", void 0);
    tslib_1.__decorate([
        Input()
    ], AngularTagsInputComponent.prototype, "required", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularTagsInputComponent.prototype, "tagRemoved", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularTagsInputComponent.prototype, "tagAdded", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularTagsInputComponent.prototype, "valueChanged", void 0);
    tslib_1.__decorate([
        Output()
    ], AngularTagsInputComponent.prototype, "itemClicked", void 0);
    tslib_1.__decorate([
        ViewChild(TagInputComponent, { static: true })
    ], AngularTagsInputComponent.prototype, "tagInput", void 0);
    tslib_1.__decorate([
        HostListener('keyup', ['$event'])
    ], AngularTagsInputComponent.prototype, "keyEvent", null);
    AngularTagsInputComponent = tslib_1.__decorate([
        Component({
            selector: 'ti-angular-tags-input',
            template: "<div\n  class=\"angular-tags-input\"\n  [ngClass]=\"config.defaultClass + ' ' + config.additionalClasses\">\n  <div class=\"angular-tags-input__inp-container\" #dropdownTrigger=\"cdkOverlayOrigin\" cdkOverlayOrigin>\n    <ng-container *ngIf=\"!config.hideTags\">\n      <ti-tag\n        class=\"angular-tags-input__inp-container__tag\"\n        *ngFor=\"let tagItem of tags\"\n        [config]=\"config\"\n        [tagItem]=\"tagItem\"\n        [tagItemTemplate]=\"tagItemTemplate\"\n        (closeClicked)=\"tagCloseClicked($event)\">\n      </ti-tag>\n    </ng-container>\n    <ti-tag-input\n      [style.display]=\"config.hideInputOnSelection && tags.length ? 'none' : 'block'\"\n      [config]=\"config\"\n      [disabled]=\"disabled\"\n      class=\"angular-tags-input__inp-container__tag-input\"\n      (tagEntered)=\"addTag($event)\"\n      (valueChanged)=\"onInputValueChanged($event)\"\n      (inputFocused)=\"onInputFocus()\"\n      (inputBlurred)=\"onFocusChange(false);\"\n      (inputKeyPress)=\"inputKeyPress($event)\">\n    </ti-tag-input>\n  </div>\n  \n  <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\"dropdownTrigger\" [cdkConnectedOverlayOpen]=\"isDropdownOpen\"\n    [cdkConnectedOverlayHasBackdrop]=\"config.ddHasBackdrop\" (backdropClick)=\"hideDropdown()\"\n    [cdkConnectedOverlayPanelClass]=\"'angular-tags-input-dd-overlay' + config.dropdownClass ? config.dropdownClass : ''\"\n    [cdkConnectedOverlayScrollStrategy]=\"ddScrollStrategy\"\n    [cdkConnectedOverlayPositions]=\"dropdownOverlayPosition\"\n    [cdkConnectedOverlayMinWidth]=\"310\">\n    <div class=\"angular-tags-input__dd-container\">\n      <ti-dropdown\n        [inputVal]=\"inputVal\"\n        (itemClicked)=\"onItemClicked($event);\"\n        [dropDownTemplate]=\"dropDownTemplate\"\n        [listItems]=\"tagsData | unAddedTags: {tagsAdded: tags, config: config}\"\n        [config]=\"config\"\n        (itemAdded)=\"addTag($event);\">\n      </ti-dropdown>\n    </div>\n  </ng-template>\n</div>\n",
            providers: [
                getAngularTagsInputValueAccessor(),
                getAngularTagsInputValidatorsProvider()
            ],
            encapsulation: ViewEncapsulation.None,
            styles: ["ti-angular-tags-input{display:block;width:100%}.angular-tags-input{display:flex;flex-direction:row;align-items:center;margin:-3px 0}.angular-tags-input__inp-container{width:100%;display:flex;flex-direction:row;align-items:center;background:#fff;flex-wrap:wrap;padding:9px 18px 18px;position:relative;top:4px}.angular-tags-input__inp-container__tag-input{flex:1}.angular-tags-input__inp-container__tag{margin:0 10px 8px 0}.angular-tags-input__dd-container{display:block;width:100%}.cdk-overlay-container.select-assignee-overlay{z-index:1050}.cdk-overlay-container.task-menu-popover-overlay{z-index:2050}.duplicate-modal-overlay{z-index:999}.cdk-overlay-backdrop{display:block}.cdk-global-overlay-wrapper,.cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{display:block;position:fixed;z-index:1000}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper{display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;background-color:#fff;z-index:1000;display:flex;max-width:100%;max-height:100%;border:1px solid #fff;box-shadow:0 2px 14px 4px rgba(0,0,0,.1)}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;-webkit-tap-highlight-color:transparent;transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}"]
        })
    ], AngularTagsInputComponent);
    return AngularTagsInputComponent;
}());
export { AngularTagsInputComponent };
export function getAngularTagsInputValueAccessor() {
    return {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return AngularTagsInputComponent; }),
        multi: true,
    };
}
export function getAngularTagsInputValidatorsProvider() {
    return {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return AngularTagsInputComponent; }),
        multi: true,
    };
}
//# sourceMappingURL=data:application/json;base64,