import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ListKeyManager } from '@angular/cdk/a11y';
import { UP_ARROW, DOWN_ARROW, ENTER } from '@angular/cdk/keycodes';
import { KEY_CODES } from '../constants';
import { AngularTagsInputService } from '../angular-tags-input.service';
import { DropdownItemsFilterPipe } from '../dropdown-items-filter.pipe';
var DropdownComponent = /** @class */ (function () {
    function DropdownComponent(tagsInputService) {
        this.tagsInputService = tagsInputService;
        this.listItems = [];
        this.inputVal = '';
        this.itemAdded = new EventEmitter();
        this.itemClicked = new EventEmitter();
        this.dropdownItemsFilter = new DropdownItemsFilterPipe();
        this.identifierSeparator = '__';
        this.itemsMap = new Map();
    }
    DropdownComponent.prototype.ngOnInit = function () {
        if (!this.dropDownTemplate) {
            // if there's no template provided, assign the default one
            this.dropDownTemplate = this.defaultTagOptionTemplate;
        }
        this.context = {
            items: tslib_1.__spread(this.listItems),
            config: this.config,
            tagsLoading: this.tagsLoading,
            fns: {
                onItemClicked: this.onItemClicked.bind(this)
            }
        };
        this.keyboardEventsManager = new ListKeyManager(tslib_1.__spread(this.listItems));
        this.populateItemsMap(this.listItems);
        this.ddIdPrefix = this.getRandomString();
        this.tagsInputService.log(this.itemsMap, 'items populated initially');
    };
    DropdownComponent.prototype.ngOnChanges = function (changes) {
        if (changes.listItems && !changes.listItems.firstChange) {
            // if the list items change, update the context items (because they're not automatically updated)
            this.filterItems(this.inputVal, changes.listItems.currentValue);
            this.populateItemsMap(changes.listItems ? changes.listItems.currentValue : this.listItems);
        }
        if (changes.inputVal && !changes.inputVal.firstChange) {
            // if the list items change, update the context items (because they're not automatically updated)
            this.filterItems(changes.inputVal.currentValue);
            this.populateItemsMap(changes.listItems ? changes.listItems.currentValue : this.listItems);
        }
    };
    /**
     * @author Ahsan Ayaz
     * @desc Updates the items property for the context provided to the dropdown template
     * @param items - the list of items to be assigned
     */
    DropdownComponent.prototype.filterItems = function (searchTerm, items) {
        if (searchTerm === void 0) { searchTerm = this.inputVal; }
        if (items === void 0) { items = this.listItems; }
        this.context.items = tslib_1.__spread(this.dropdownItemsFilter.transform(items, this.config, searchTerm));
        this.ddIdPrefix = this.getRandomString();
    };
    DropdownComponent.prototype.getRandomString = function () {
        return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
    };
    DropdownComponent.prototype.populateItemsMap = function (items, prefix) {
        var _this = this;
        if (prefix === void 0) { prefix = null; }
        if (prefix === null) {
            prefix = '';
        }
        else {
            prefix += this.identifierSeparator;
        }
        items.map(function (item, index) {
            var newPrefix = prefix + index;
            item.tiIdentifier = newPrefix;
            _this.itemsMap[newPrefix] = item;
            if (item[_this.config.nestedTagProperty] && item[_this.config.nestedTagProperty].length) {
                _this.populateItemsMap(item[_this.config.nestedTagProperty], newPrefix);
            }
        });
    };
    /**
     * @author Ahsan Ayaz
     * @desc When an option is clicked from the options dropdown
     * @param item - item clicked
     */
    DropdownComponent.prototype.onItemClicked = function (item, $event) {
        if ($event === void 0) { $event = null; }
        if ($event) {
            $event.stopImmediatePropagation(); // for nested items
        }
        this.itemClicked.emit(item);
    };
    DropdownComponent.prototype.handleKeyUp = function (event) {
        event.stopImmediatePropagation();
        if (!this.keyboardEventsManager) {
            return;
        }
        var isKeyDown = this.isKeyDown(event);
        var isKeyUp = this.isKeyUp(event);
        var isKeyEnter = this.isKeyEnter(event);
        if (isKeyDown || isKeyUp) {
            // passing the event to key manager so we get a change fired
            this.setActiveElement(event);
        }
        else if (isKeyEnter &&
            this.keyboardEventsManager.activeItem) {
            this.itemClicked.emit(this.keyboardEventsManager.activeItem);
        }
    };
    DropdownComponent.prototype.isKeyDown = function (event) {
        // tslint:disable-next-line: deprecation
        return event.key === KEY_CODES.ARROW_DOWN || event.keyCode === DOWN_ARROW;
    };
    DropdownComponent.prototype.isKeyUp = function (event) {
        // tslint:disable-next-line: deprecation
        return event.key === KEY_CODES.ARROW_UP || event.keyCode === UP_ARROW;
    };
    DropdownComponent.prototype.isKeyEnter = function (event) {
        // tslint:disable-next-line: deprecation
        return event.key === KEY_CODES.ENTER || event.keyCode === ENTER;
    };
    DropdownComponent.prototype.setActiveElement = function (event) {
        var isKeyDown = this.isKeyDown(event);
        var isKeyUp = this.isKeyUp(event);
        var previousActiveItem = tslib_1.__assign({}, this.keyboardEventsManager.activeItem);
        if (isKeyDown) {
            this.setNextActiveElement(previousActiveItem, this.listItems);
        }
        else if (isKeyUp) {
            this.setPreviousActiveElement(previousActiveItem, this.listItems);
        }
    };
    DropdownComponent.prototype.setNextActiveElement = function (currentActiveItem, items) {
        var _this = this;
        var identifier = currentActiveItem.tiIdentifier;
        if (!identifier) {
            items[0].tiKeyboardActive = true;
            this.keyboardEventsManager.setFirstItemActive();
            return;
        }
        var keyIdentifierArr = identifier.split(this.identifierSeparator);
        var keyIdentifier;
        var treeItems;
        var index;
        keyIdentifier = keyIdentifierArr.length > 1 ?
            tslib_1.__spread(keyIdentifierArr).splice(0, keyIdentifierArr.length - 1).join(this.identifierSeparator) :
            keyIdentifierArr[0];
        treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + _this.identifierSeparator).test(key); });
        if (!treeItems.length) {
            treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + "$").test(key); });
        }
        index = treeItems.findIndex(function (id) { return id === identifier; });
        if (index === treeItems.length - 1) {
            this.setActiveElementRecursively(this.findNextParent(keyIdentifierArr), this.listItems);
        }
        else {
            this.setActiveElementRecursively(treeItems[index + 1], this.listItems);
        }
    };
    DropdownComponent.prototype.findNextParent = function (keyIdentifierArr) {
        var keyIdentifier;
        var treeItems;
        if (keyIdentifierArr.length === 1) {
            var nextIdentifier = "" + (+keyIdentifierArr[0] + 1);
            if (this.itemsMap[nextIdentifier]) {
                return nextIdentifier;
            }
            return keyIdentifierArr[0];
        }
        var nextIdArr = tslib_1.__spread(keyIdentifierArr).splice(0, keyIdentifierArr.length - 1);
        nextIdArr[nextIdArr.length - 1] = "" + ((+nextIdArr[nextIdArr.length - 1]) + 1);
        keyIdentifier = nextIdArr.join(this.identifierSeparator);
        treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier).test(key); });
        if (treeItems.length) {
            return treeItems[0];
        }
        else {
            return this.findNextParent(tslib_1.__spread(keyIdentifierArr.splice(0, keyIdentifierArr.length - 1)));
        }
    };
    DropdownComponent.prototype.setPreviousActiveElement = function (currentActiveItem, items) {
        var _this = this;
        var identifier = currentActiveItem.tiIdentifier;
        if (!identifier) {
            items[items.length - 1].tiKeyboardActive = true;
            this.keyboardEventsManager.setActiveItem(items[items.length - 1]);
            return;
        }
        var keyIdentifierArr = identifier.split(this.identifierSeparator);
        var keyIdentifier;
        var treeItems;
        var index;
        keyIdentifier = keyIdentifierArr.length > 1 ?
            tslib_1.__spread(keyIdentifierArr).splice(0, keyIdentifierArr.length - 1).join(this.identifierSeparator) :
            keyIdentifierArr[0];
        treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + "(" + _this.identifierSeparator + ")?").test(key); });
        if (!treeItems.length) {
            treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + "$").test(key); });
        }
        index = treeItems.findIndex(function (id) { return id === identifier; });
        if (treeItems.length === 1 || index === 0) {
            this.setActiveElementRecursively(this.findPrevousParentLastChild(keyIdentifierArr, identifier), this.listItems);
        }
        else {
            this.setActiveElementRecursively(treeItems[index - 1], this.listItems);
        }
    };
    DropdownComponent.prototype.findPrevousParentLastChild = function (keyIdentifierArr, prevItemIdentifier) {
        var _this = this;
        var keyIdentifier;
        var isOnlyItem = keyIdentifierArr.length === 1;
        var prevIdArr = !!isOnlyItem ? tslib_1.__spread(keyIdentifierArr) :
            tslib_1.__spread(keyIdentifierArr).splice(0, keyIdentifierArr.length - 1);
        prevIdArr[prevIdArr.length - 1] = !!isOnlyItem ? "" + ((+prevIdArr[prevIdArr.length - 1]) - 1) : prevIdArr[prevIdArr.length - 1];
        keyIdentifier = prevIdArr.join(this.identifierSeparator);
        var treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + _this.identifierSeparator).test(key); });
        if (!treeItems.length) {
            treeItems = Object.keys(this.itemsMap).filter(function (key) { return new RegExp("^" + keyIdentifier + "$").test(key); });
        }
        if (treeItems.length) {
            if (treeItems.indexOf(prevItemIdentifier) !== -1) {
                return keyIdentifier;
            }
            return treeItems[treeItems.length - 1];
        }
        else if (keyIdentifierArr.length > 1) {
            return this.findPrevousParentLastChild(tslib_1.__spread(keyIdentifierArr.splice(0, keyIdentifierArr.length - 1)), prevItemIdentifier);
        }
        else {
            keyIdentifier = keyIdentifierArr.join(this.identifierSeparator);
            return keyIdentifier;
        }
    };
    DropdownComponent.prototype.setActiveElementRecursively = function (identifier, items) {
        for (var i = 0, len = items.length; i < len; ++i) {
            items[i].tiKeyboardActive = false;
            if (items[i].tiIdentifier === identifier) {
                this.keyboardEventsManager = new ListKeyManager(tslib_1.__spread(items));
                items[i].tiKeyboardActive = true; // select next item
                this.keyboardEventsManager.setActiveItem(items[i]);
            }
            if (items[i][this.config.nestedTagProperty] && items[i][this.config.nestedTagProperty].length) {
                this.setActiveElementRecursively(identifier, items[i][this.config.nestedTagProperty]);
            }
        }
    };
    DropdownComponent.ctorParameters = function () { return [
        { type: AngularTagsInputService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], DropdownComponent.prototype, "config", void 0);
    tslib_1.__decorate([
        Input()
    ], DropdownComponent.prototype, "listItems", void 0);
    tslib_1.__decorate([
        Input()
    ], DropdownComponent.prototype, "inputVal", void 0);
    tslib_1.__decorate([
        Input()
    ], DropdownComponent.prototype, "dropDownTemplate", void 0);
    tslib_1.__decorate([
        Input()
    ], DropdownComponent.prototype, "tagsLoading", void 0);
    tslib_1.__decorate([
        Input()
    ], DropdownComponent.prototype, "keyPress", void 0);
    tslib_1.__decorate([
        Output()
    ], DropdownComponent.prototype, "itemAdded", void 0);
    tslib_1.__decorate([
        Output()
    ], DropdownComponent.prototype, "itemClicked", void 0);
    tslib_1.__decorate([
        ViewChild('defaultTagOptionTemplate', { static: true })
    ], DropdownComponent.prototype, "defaultTagOptionTemplate", void 0);
    DropdownComponent = tslib_1.__decorate([
        Component({
            selector: 'ti-dropdown',
            template: "\n<ng-container\n *ngTemplateOutlet=\"dropDownTemplate; context: context\">\n</ng-container>\n\n<!-- Default Tag Options Template -->\n<ng-template #defaultTagOptionTemplate let-items=\"items\" let-config=\"config\">\n  <div class=\"angular-tags-dropdown\">\n    <div class=\"angular-tags-dropdown__list\">\n      <ng-container *ngFor=\"let item of items, let i = index\">\n        <div\n          class=\"angular-tags-dropdown__list__item\"\n          (click)=\"onItemClicked(item)\"\n          tiKeyboardActiveClass=\"angular-tags-dropdown__list__item--active\"\n          [isKeyboardActiveItem]=\"item.tiKeyboardActive\"\n          >\n          {{item[config.displayProperty]}}\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n",
            styles: [":host{display:block}:host .angular-tags-dropdown{padding:8px 10px}:host .angular-tags-dropdown__list__item{padding:8px 10px;cursor:pointer;transition:.5s}:host .angular-tags-dropdown__list__item:hover{background:#dcdcdc}:host .angular-tags-dropdown__list__item--active{background:#333;color:#fff}"]
        })
    ], DropdownComponent);
    return DropdownComponent;
}());
export { DropdownComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGlvbWVjaHMvYW5ndWxhci10YWdzLWlucHV0LyIsInNvdXJjZXMiOlsibGliL2Ryb3Bkb3duL2Ryb3Bkb3duLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUdMLE1BQU0sRUFHTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGNBQWMsRUFBd0IsTUFBTSxtQkFBbUIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQU1wRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBT3hFO0lBa0JFLDJCQUNVLGdCQUF5QztRQUF6QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXlCO1FBaEIxQyxjQUFTLEdBQTBCLEVBQUUsQ0FBQztRQUN0QyxhQUFRLEdBQUcsRUFBRSxDQUFDO1FBSWIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBQy9DLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQWtCLENBQUM7UUFFM0Qsd0JBQW1CLEdBQUcsSUFBSSx1QkFBdUIsRUFBRSxDQUFDO1FBSXBELHdCQUFtQixHQUFHLElBQUksQ0FBQztRQUUzQixhQUFRLEdBQXFCLElBQUksR0FBRyxFQUFlLENBQUM7SUFHakQsQ0FBQztJQUVKLG9DQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQzFCLDBEQUEwRDtZQUMxRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFD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Q3ZCLG13QkFBd0M7O1NBRXpDLENBQUM7T0FDVyxpQkFBaUIsQ0F5UTdCO0lBQUQsd0JBQUM7Q0FBQSxBQXpRRCxJQXlRQztTQXpRWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMaXN0S2V5TWFuYWdlciwgTGlzdEtleU1hbmFnZXJPcHRpb24gfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBVUF9BUlJPVywgRE9XTl9BUlJPVywgRU5URVIgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHtcbiAgQW5ndWxhclRhZ0l0ZW0sXG4gIEFuZ3VsYXJUYWdzSW5wdXRDb25maWcsXG4gIEFuZ3VsYXJUYWdzSW5wdXREREZuc1xufSBmcm9tICcuLi90YWdzLWlucHV0LWludGVyZmFjZXMnO1xuaW1wb3J0IHsgS0VZX0NPREVTIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IEFuZ3VsYXJUYWdzSW5wdXRTZXJ2aWNlIH0gZnJvbSAnLi4vYW5ndWxhci10YWdzLWlucHV0LnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJvcGRvd25JdGVtc0ZpbHRlclBpcGUgfSBmcm9tICcuLi9kcm9wZG93bi1pdGVtcy1maWx0ZXIucGlwZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RpLWRyb3Bkb3duJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Ryb3Bkb3duLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vZHJvcGRvd24uY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBEcm9wZG93bkNvbXBvbmVudFxuICBpbXBsZW1lbnRzIE9uSW5pdCwgQW5ndWxhclRhZ3NJbnB1dERERm5zLCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBjb25maWc6IEFuZ3VsYXJUYWdzSW5wdXRDb25maWc7XG4gIEBJbnB1dCgpIGxpc3RJdGVtczogQXJyYXk8QW5ndWxhclRhZ0l0ZW0+ID0gW107XG4gIEBJbnB1dCgpIGlucHV0VmFsID0gJyc7XG4gIEBJbnB1dCgpIGRyb3BEb3duVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gIEBJbnB1dCgpIHRhZ3NMb2FkaW5nOiBib29sZWFuO1xuICBASW5wdXQoKSBrZXlQcmVzczogYW55O1xuICBAT3V0cHV0KCkgaXRlbUFkZGVkID0gbmV3IEV2ZW50RW1pdHRlcjxBbmd1bGFyVGFnSXRlbT4oKTtcbiAgQE91dHB1dCgpIGl0ZW1DbGlja2VkID0gbmV3IEV2ZW50RW1pdHRlcjxBbmd1bGFyVGFnSXRlbT4oKTtcbiAgQFZpZXdDaGlsZCgnZGVmYXVsdFRhZ09wdGlvblRlbXBsYXRlJywgeyBzdGF0aWM6IHRydWUgfSkgZGVmYXVsdFRhZ09wdGlvblRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBkcm9wZG93bkl0ZW1zRmlsdGVyID0gbmV3IERyb3Bkb3duSXRlbXNGaWx0ZXJQaXBlKCk7XG4gIGRkSWRQcmVmaXg6IHN0cmluZztcbiAgY29udGV4dDogYW55O1xuICBhY3RpdmVJbmRleDogbnVtYmVyO1xuICBpZGVudGlmaWVyU2VwYXJhdG9yID0gJ19fJztcbiAga2V5Ym9hcmRFdmVudHNNYW5hZ2VyOiBMaXN0S2V5TWFuYWdlcjxMaXN0S2V5TWFuYWdlck9wdGlvbj47XG4gIGl0ZW1zTWFwOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0YWdzSW5wdXRTZXJ2aWNlOiBBbmd1bGFyVGFnc0lucHV0U2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmRyb3BEb3duVGVtcGxhdGUpIHtcbiAgICAgIC8vIGlmIHRoZXJlJ3Mgbm8gdGVtcGxhdGUgcHJvdmlkZWQsIGFzc2lnbiB0aGUgZGVmYXVsdCBvbmVcbiAgICAgIHRoaXMuZHJvcERvd25UZW1wbGF0ZSA9IHRoaXMuZGVmYXVsdFRhZ09wdGlvblRlbXBsYXRlO1xuICAgIH1cbiAgICB0aGlzLmNvbnRleHQgPSB7XG4gICAgICBpdGVtczogWy4uLnRoaXMubGlzdEl0ZW1zXSxcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICB0YWdzTG9hZGluZzogdGhpcy50YWdzTG9hZGluZyxcbiAgICAgIGZuczoge1xuICAgICAgICBvbkl0ZW1DbGlja2VkOiB0aGlzLm9uSXRlbUNsaWNrZWQuYmluZCh0aGlzKVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5rZXlib2FyZEV2ZW50c01hbmFnZXIgPSBuZXcgTGlzdEtleU1hbmFnZXIoWy4uLnRoaXMubGlzdEl0ZW1zIGFzIGFueV0pO1xuICAgIHRoaXMucG9wdWxhdGVJdGVtc01hcCh0aGlzLmxpc3RJdGVtcyk7XG4gICAgdGhpcy5kZElkUHJlZml4ID0gdGhpcy5nZXRSYW5kb21TdHJpbmcoKTtcbiAgICB0aGlzLnRhZ3NJbnB1dFNlcnZpY2UubG9nKHRoaXMuaXRlbXNNYXAsICdpdGVtcyBwb3B1bGF0ZWQgaW5pdGlhbGx5Jyk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMubGlzdEl0ZW1zICYmICFjaGFuZ2VzLmxpc3RJdGVtcy5maXJzdENoYW5nZSkge1xuICAgICAgLy8gaWYgdGhlIGxpc3QgaXRlbXMgY2hhbmdlLCB1cGRhdGUgdGhlIGNvbnRleHQgaXRlbXMgKGJlY2F1c2UgdGhleSdyZSBub3QgYXV0b21hdGljYWxseSB1cGRhdGVkKVxuICAgICAgdGhpcy5maWx0ZXJJdGVtcyh0aGlzLmlucHV0VmFsLCBjaGFuZ2VzLmxpc3RJdGVtcy5jdXJyZW50VmFsdWUpO1xuICAgICAgdGhpcy5wb3B1bGF0ZUl0ZW1zTWFwKGNoYW5nZXMubGlzdEl0ZW1zID8gY2hhbmdlcy5saXN0SXRlbXMuY3VycmVudFZhbHVlIDogdGhpcy5saXN0SXRlbXMpO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNoYW5nZXMuaW5wdXRWYWwgJiYgIWNoYW5nZXMuaW5wdXRWYWwuZmlyc3RDaGFuZ2VcbiAgICApIHtcbiAgICAgIC8vIGlmIHRoZSBsaXN0IGl0ZW1zIGNoYW5nZSwgdXBkYXRlIHRoZSBjb250ZXh0IGl0ZW1zIChiZWNhdXNlIHRoZXkncmUgbm90IGF1dG9tYXRpY2FsbHkgdXBkYXRlZClcbiAgICAgIHRoaXMuZmlsdGVySXRlbXMoY2hhbmdlcy5pbnB1dFZhbC5jdXJyZW50VmFsdWUpO1xuICAgICAgdGhpcy5wb3B1bGF0ZUl0ZW1zTWFwKGNoYW5nZXMubGlzdEl0ZW1zID8gY2hhbmdlcy5saXN0SXRlbXMuY3VycmVudFZhbHVlIDogdGhpcy5saXN0SXRlbXMpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEBhdXRob3IgQWhzYW4gQXlhelxuICAgKiBAZGVzYyBVcGRhdGVzIHRoZSBpdGVtcyBwcm9wZXJ0eSBmb3IgdGhlIGNvbnRleHQgcHJvdmlkZWQgdG8gdGhlIGRyb3Bkb3duIHRlbXBsYXRlXG4gICAqIEBwYXJhbSBpdGVtcyAtIHRoZSBsaXN0IG9mIGl0ZW1zIHRvIGJlIGFzc2lnbmVkXG4gICAqL1xuXG4gIGZpbHRlckl0ZW1zKHNlYXJjaFRlcm0gPSB0aGlzLmlucHV0VmFsLCBpdGVtcyA9IHRoaXMubGlzdEl0ZW1zKSB7XG4gICAgdGhpcy5jb250ZXh0Lml0ZW1zID0gWy4uLnRoaXMuZHJvcGRvd25JdGVtc0ZpbHRlci50cmFuc2Zvcm0oXG4gICAgICBpdGVtcyxcbiAgICAgIHRoaXMuY29uZmlnLFxuICAgICAgc2VhcmNoVGVybVxuICAgICldO1xuICAgIHRoaXMuZGRJZFByZWZpeCA9IHRoaXMuZ2V0UmFuZG9tU3RyaW5nKCk7XG4gIH1cblxuICBwcml2YXRlIGdldFJhbmRvbVN0cmluZygpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDE1KSArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxNSk7XG4gIH1cblxuICBwb3B1bGF0ZUl0ZW1zTWFwKGl0ZW1zLCBwcmVmaXggPSBudWxsKSB7XG4gICAgaWYgKHByZWZpeCA9PT0gbnVsbCkge1xuICAgICAgcHJlZml4ID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZWZpeCArPSB0aGlzLmlkZW50aWZpZXJTZXBhcmF0b3I7XG4gICAgfVxuICAgIGl0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IG5ld1ByZWZpeCA9IHByZWZpeCArIGluZGV4O1xuICAgICAgaXRlbS50aUlkZW50aWZpZXIgPSBuZXdQcmVmaXg7XG4gICAgICB0aGlzLml0ZW1zTWFwW25ld1ByZWZpeF0gPSBpdGVtO1xuICAgICAgaWYgKGl0ZW1bdGhpcy5jb25maWcubmVzdGVkVGFnUHJvcGVydHldICYmIGl0ZW1bdGhpcy5jb25maWcubmVzdGVkVGFnUHJvcGVydHldLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnBvcHVsYXRlSXRlbXNNYXAoaXRlbVt0aGlzLmNvbmZpZy5uZXN0ZWRUYWdQcm9wZXJ0eV0sIG5ld1ByZWZpeCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQGF1dGhvciBBaHNhbiBBeWF6XG4gICAqIEBkZXNjIFdoZW4gYW4gb3B0aW9uIGlzIGNsaWNrZWQgZnJvbSB0aGUgb3B0aW9ucyBkcm9wZG93blxuICAgKiBAcGFyYW0gaXRlbSAtIGl0ZW0gY2xpY2tlZFxuICAgKi9cbiAgb25JdGVtQ2xpY2tlZChpdGVtOiBBbmd1bGFyVGFnSXRlbSwgJGV2ZW50ID0gbnVsbCkge1xuICAgIGlmICgkZXZlbnQpIHtcbiAgICAgICRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTsgLy8gZm9yIG5lc3RlZCBpdGVtc1xuICAgIH1cbiAgICB0aGlzLml0ZW1DbGlja2VkLmVtaXQoaXRlbSk7XG4gIH1cblxuICBoYW5kbGVLZXlVcChldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIGlmICghdGhpcy5rZXlib2FyZEV2ZW50c01hbmFnZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNLZXlEb3duID0gdGhpcy5pc0tleURvd24oZXZlbnQpO1xuICAgIGNvbnN0IGlzS2V5VXAgPSB0aGlzLmlzS2V5VXAoZXZlbnQpO1xuICAgIGNvbnN0IGlzS2V5RW50ZXIgPSB0aGlzLmlzS2V5RW50ZXIoZXZlbnQpO1xuXG4gICAgaWYgKGlzS2V5RG93biB8fCBpc0tleVVwKSB7XG4gICAgICAvLyBwYXNzaW5nIHRoZSBldmVudCB0byBrZXkgbWFuYWdlciBzbyB3ZSBnZXQgYSBjaGFuZ2UgZmlyZWRcbiAgICAgIHRoaXMuc2V0QWN0aXZlRWxlbWVudChldmVudCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGlzS2V5RW50ZXIgJiZcbiAgICAgIHRoaXMua2V5Ym9hcmRFdmVudHNNYW5hZ2VyLmFjdGl2ZUl0ZW1cbiAgICApIHtcbiAgICAgIHRoaXMuaXRlbUNsaWNrZWQuZW1pdChcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50c01hbmFnZXIuYWN0aXZlSXRlbSBhcyBBbmd1bGFyVGFnSXRlbVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpc0tleURvd24oZXZlbnQpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRlcHJlY2F0aW9uXG4gICAgcmV0dXJuIGV2ZW50LmtleSA9PT0gS0VZX0NPREVTLkFSUk9XX0RPV04gfHwgZXZlbnQua2V5Q29kZSA9PT0gRE9XTl9BUlJPVztcbiAgfVxuXG4gIGlzS2V5VXAoZXZlbnQpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRlcHJlY2F0aW9uXG4gICAgcmV0dXJuIGV2ZW50LmtleSA9PT0gS0VZX0NPREVTLkFSUk9XX1VQIHx8IGV2ZW50LmtleUNvZGUgPT09IFVQX0FSUk9XO1xuICB9XG5cbiAgaXNLZXlFbnRlcihldmVudCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGVwcmVjYXRpb25cbiAgICByZXR1cm4gZXZlbnQua2V5ID09PSBLRVlfQ09ERVMuRU5URVIgfHwgZXZlbnQua2V5Q29kZSA9PT0gRU5URVI7XG4gIH1cblxuICBzZXRBY3RpdmVFbGVtZW50KGV2ZW50KSB7XG4gICAgY29uc3QgaXNLZXlEb3duID0gdGhpcy5pc0tleURvd24oZXZlbnQpO1xuICAgIGNvbnN0IGlzS2V5VXAgPSB0aGlzLmlzS2V5VXAoZXZlbnQpO1xuICAgIGNvbnN0IHByZXZpb3VzQWN0aXZlSXRlbSA9IHsgLi4udGhpcy5rZXlib2FyZEV2ZW50c01hbmFnZXIuYWN0aXZlSXRlbSB9IGFzIEFuZ3VsYXJUYWdJdGVtO1xuICAgIGlmIChpc0tleURvd24pIHtcbiAgICAgIHRoaXMuc2V0TmV4dEFjdGl2ZUVsZW1lbnQocHJldmlvdXNBY3RpdmVJdGVtLCB0aGlzLmxpc3RJdGVtcyk7XG4gICAgfSBlbHNlIGlmIChpc0tleVVwKSB7XG4gICAgICB0aGlzLnNldFByZXZpb3VzQWN0aXZlRWxlbWVudChwcmV2aW91c0FjdGl2ZUl0ZW0sIHRoaXMubGlzdEl0ZW1zKTtcbiAgICB9XG4gIH1cblxuICBzZXROZXh0QWN0aXZlRWxlbWVudChjdXJyZW50QWN0aXZlSXRlbTogQW5ndWxhclRhZ0l0ZW0sIGl0ZW1zKSB7XG4gICAgY29uc3QgaWRlbnRpZmllciA9IGN1cnJlbnRBY3RpdmVJdGVtLnRpSWRlbnRpZmllcjtcbiAgICBpZiAoIWlkZW50aWZpZXIpIHtcbiAgICAgIGl0ZW1zWzBdLnRpS2V5Ym9hcmRBY3RpdmUgPSB0cnVlO1xuICAgICAgdGhpcy5rZXlib2FyZEV2ZW50c01hbmFnZXIuc2V0Rmlyc3RJdGVtQWN0aXZlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGtleUlkZW50aWZpZXJBcnIgPSBpZGVudGlmaWVyLnNwbGl0KHRoaXMuaWRlbnRpZmllclNlcGFyYXRvcik7XG4gICAgbGV0IGtleUlkZW50aWZpZXI7XG4gICAgbGV0IHRyZWVJdGVtcztcbiAgICBsZXQgaW5kZXg7XG4gICAga2V5SWRlbnRpZmllciA9IGtleUlkZW50aWZpZXJBcnIubGVuZ3RoID4gMSA/XG4gICAgICBbLi4ua2V5SWRlbnRpZmllckFycl0uc3BsaWNlKDAsIGtleUlkZW50aWZpZXJBcnIubGVuZ3RoIC0gMSkuam9pbih0aGlzLmlkZW50aWZpZXJTZXBhcmF0b3IpIDpcbiAgICAgIGtleUlkZW50aWZpZXJBcnJbMF07XG4gICAgdHJlZUl0ZW1zID0gT2JqZWN0LmtleXModGhpcy5pdGVtc01hcCkuZmlsdGVyKGtleSA9PiBuZXcgUmVnRXhwKGBeJHtrZXlJZGVudGlmaWVyfSR7dGhpcy5pZGVudGlmaWVyU2VwYXJhdG9yfWApLnRlc3Qoa2V5KSk7XG4gICAgaWYgKCF0cmVlSXRlbXMubGVuZ3RoKSB7XG4gICAgICB0cmVlSXRlbXMgPSBPYmplY3Qua2V5cyh0aGlzLml0ZW1zTWFwKS5maWx0ZXIoa2V5ID0+IG5ldyBSZWdFeHAoYF4ke2tleUlkZW50aWZpZXJ9JGApLnRlc3Qoa2V5KSk7XG4gICAgfVxuICAgIGluZGV4ID0gdHJlZUl0ZW1zLmZpbmRJbmRleChpZCA9PiBpZCA9PT0gaWRlbnRpZmllcik7XG4gICAgaWYgKGluZGV4ID09PSB0cmVlSXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgdGhpcy5zZXRBY3RpdmVFbGVtZW50UmVjdXJzaXZlbHkodGhpcy5maW5kTmV4dFBhcmVudChrZXlJZGVudGlmaWVyQXJyKSwgdGhpcy5saXN0SXRlbXMpO1xuICAgIH0gZWxzZSAge1xuICAgICAgdGhpcy5zZXRBY3RpdmVFbGVtZW50UmVjdXJzaXZlbHkodHJlZUl0ZW1zW2luZGV4ICsgMV0sIHRoaXMubGlzdEl0ZW1zKTtcbiAgICB9XG4gIH1cblxuICBmaW5kTmV4dFBhcmVudChrZXlJZGVudGlmaWVyQXJyKSB7XG4gICAgbGV0IGtleUlkZW50aWZpZXI7XG4gICAgbGV0IHRyZWVJdGVtcztcbiAgICBpZiAoa2V5SWRlbnRpZmllckFyci5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IG5leHRJZGVudGlmaWVyID0gYCR7K2tleUlkZW50aWZpZXJBcnJbMF0gKyAxfWA7XG4gICAgICBpZiAodGhpcy5pdGVtc01hcFtuZXh0SWRlbnRpZmllcl0pIHtcbiAgICAgICAgcmV0dXJuIG5leHRJZGVudGlmaWVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGtleUlkZW50aWZpZXJBcnJbMF07XG4gICAgfVxuICAgIGNvbnN0IG5leHRJZEFyciA9IFsuLi5rZXlJZGVudGlmaWVyQXJyXS5zcGxpY2UoMCwga2V5SWRlbnRpZmllckFyci5sZW5ndGggLSAxKTtcbiAgICBuZXh0SWRBcnJbbmV4dElkQXJyLmxlbmd0aCAtIDFdID0gYCR7KCtuZXh0SWRBcnJbbmV4dElkQXJyLmxlbmd0aCAtIDFdKSArIDF9YDtcbiAgICBrZXlJZGVudGlmaWVyID0gbmV4dElkQXJyLmpvaW4odGhpcy5pZGVudGlmaWVyU2VwYXJhdG9yKTtcbiAgICB0cmVlSXRlbXMgPSBPYmplY3Qua2V5cyh0aGlzLml0ZW1zTWFwKS5maWx0ZXIoa2V5ID0+IG5ldyBSZWdFeHAoYF4ke2tleUlkZW50aWZpZXJ9YCkudGVzdChrZXkpKTtcbiAgICBpZiAodHJlZUl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRyZWVJdGVtc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZE5leHRQYXJlbnQoWy4uLmtleUlkZW50aWZpZXJBcnIuc3BsaWNlKDAsIGtleUlkZW50aWZpZXJBcnIubGVuZ3RoIC0gMSldKTtcbiAgICB9XG4gIH1cblxuICBzZXRQcmV2aW91c0FjdGl2ZUVsZW1lbnQoY3VycmVudEFjdGl2ZUl0ZW06IEFuZ3VsYXJUYWdJdGVtLCBpdGVtcykge1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSBjdXJyZW50QWN0aXZlSXRlbS50aUlkZW50aWZpZXI7XG4gICAgaWYgKCFpZGVudGlmaWVyKSB7XG4gICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50aUtleWJvYXJkQWN0aXZlID0gdHJ1ZTtcbiAgICAgIHRoaXMua2V5Ym9hcmRFdmVudHNNYW5hZ2VyLnNldEFjdGl2ZUl0ZW0oaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGtleUlkZW50aWZpZXJBcnIgPSBpZGVudGlmaWVyLnNwbGl0KHRoaXMuaWRlbnRpZmllclNlcGFyYXRvcik7XG4gICAgbGV0IGtleUlkZW50aWZpZXI7XG4gICAgbGV0IHRyZWVJdGVtcztcbiAgICBsZXQgaW5kZXg7XG4gICAga2V5SWRlbnRpZmllciA9IGtleUlkZW50aWZpZXJBcnIubGVuZ3RoID4gMSA/XG4gICAgICBbLi4ua2V5SWRlbnRpZmllckFycl0uc3BsaWNlKDAsIGtleUlkZW50aWZpZXJBcnIubGVuZ3RoIC0gMSkuam9pbih0aGlzLmlkZW50aWZpZXJTZXBhcmF0b3IpIDpcbiAgICAgIGtleUlkZW50aWZpZXJBcnJbMF07XG4gICAgdHJlZUl0ZW1zID0gT2JqZWN0LmtleXModGhpcy5pdGVtc01hcCkuZmlsdGVyKGtleSA9PiBuZXcgUmVnRXhwKGBeJHtrZXlJZGVudGlmaWVyfSgke3RoaXMuaWRlbnRpZmllclNlcGFyYXRvcn0pP2ApLnRlc3Qoa2V5KSk7XG4gICAgaWYgKCF0cmVlSXRlbXMubGVuZ3RoKSB7XG4gICAgICB0cmVlSXRlbXMgPSBPYmplY3Qua2V5cyh0aGlzLml0ZW1zTWFwKS5maWx0ZXIoa2V5ID0+IG5ldyBSZWdFeHAoYF4ke2tleUlkZW50aWZpZXJ9JGApLnRlc3Qoa2V5KSk7XG4gICAgfVxuICAgIGluZGV4ID0gdHJlZUl0ZW1zLmZpbmRJbmRleChpZCA9PiBpZCA9PT0gaWRlbnRpZmllcik7XG4gICAgaWYgKHRyZWVJdGVtcy5sZW5ndGggPT09IDEgfHwgaW5kZXggPT09IDApIHtcbiAgICAgIHRoaXMuc2V0QWN0aXZlRWxlbWVudFJlY3Vyc2l2ZWx5KHRoaXMuZmluZFByZXZvdXNQYXJlbnRMYXN0Q2hpbGQoa2V5SWRlbnRpZmllckFyciwgaWRlbnRpZmllciksIHRoaXMubGlzdEl0ZW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRBY3RpdmVFbGVtZW50UmVjdXJzaXZlbHkodHJlZUl0ZW1zW2luZGV4IC0gMV0sIHRoaXMubGlzdEl0ZW1zKTtcbiAgICB9XG4gIH1cblxuICBmaW5kUHJldm91c1BhcmVudExhc3RDaGlsZChrZXlJZGVudGlmaWVyQXJyLCBwcmV2SXRlbUlkZW50aWZpZXI6IHN0cmluZykge1xuICAgIGxldCBrZXlJZGVudGlmaWVyO1xuICAgIGNvbnN0IGlzT25seUl0ZW0gPSBrZXlJZGVudGlmaWVyQXJyLmxlbmd0aCA9PT0gMTtcbiAgICBjb25zdCBwcmV2SWRBcnIgPSAhIWlzT25seUl0ZW0gP1xuICAgICAgWy4uLmtleUlkZW50aWZpZXJBcnJdIDpcbiAgICAgIFsuLi5rZXlJZGVudGlmaWVyQXJyXS5zcGxpY2UoMCwga2V5SWRlbnRpZmllckFyci5sZW5ndGggLSAxKTtcbiAgICBwcmV2SWRBcnJbcHJldklkQXJyLmxlbmd0aCAtIDFdID0gISFpc09ubHlJdGVtID8gYCR7KCtwcmV2SWRBcnJbcHJldklkQXJyLmxlbmd0aCAtIDFdKSAtIDF9YCA6IHByZXZJZEFycltwcmV2SWRBcnIubGVuZ3RoIC0gMV07XG4gICAga2V5SWRlbnRpZmllciA9IHByZXZJZEFyci5qb2luKHRoaXMuaWRlbnRpZmllclNlcGFyYXRvcik7XG4gICAgbGV0IHRyZWVJdGVtcyA9IE9iamVjdC5rZXlzKHRoaXMuaXRlbXNNYXApLmZpbHRlcihrZXkgPT4gbmV3IFJlZ0V4cChgXiR7a2V5SWRlbnRpZmllcn0ke3RoaXMuaWRlbnRpZmllclNlcGFyYXRvcn1gKS50ZXN0KGtleSkpO1xuICAgIGlmICghdHJlZUl0ZW1zLmxlbmd0aCkge1xuICAgICAgdHJlZUl0ZW1zID0gT2JqZWN0LmtleXModGhpcy5pdGVtc01hcCkuZmlsdGVyKGtleSA9PiBuZXcgUmVnRXhwKGBeJHtrZXlJZGVudGlmaWVyfSRgKS50ZXN0KGtleSkpO1xuICAgIH1cbiAgICBpZiAodHJlZUl0ZW1zLmxlbmd0aCkge1xuICAgICAgaWYgKHRyZWVJdGVtcy5pbmRleE9mKHByZXZJdGVtSWRlbnRpZmllcikgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBrZXlJZGVudGlmaWVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRyZWVJdGVtc1t0cmVlSXRlbXMubGVuZ3RoIC0gMV07XG4gICAgfSBlbHNlIGlmIChrZXlJZGVudGlmaWVyQXJyLmxlbmd0aCA+IDEpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbmRQcmV2b3VzUGFyZW50TGFzdENoaWxkKFsuLi5rZXlJZGVudGlmaWVyQXJyLnNwbGljZSgwLCBrZXlJZGVudGlmaWVyQXJyLmxlbmd0aCAtIDEpXSwgcHJldkl0ZW1JZGVudGlmaWVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5SWRlbnRpZmllciA9IGtleUlkZW50aWZpZXJBcnIuam9pbih0aGlzLmlkZW50aWZpZXJTZXBhcmF0b3IpO1xuICAgICAgcmV0dXJuIGtleUlkZW50aWZpZXI7XG4gICAgfVxuICB9XG5cbiAgc2V0QWN0aXZlRWxlbWVudFJlY3Vyc2l2ZWx5KGlkZW50aWZpZXIsIGl0ZW1zKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGxlbjsgKytpICkge1xuICAgICAgaXRlbXNbaV0udGlLZXlib2FyZEFjdGl2ZSA9IGZhbHNlO1xuICAgICAgaWYgKGl0ZW1zW2ldLnRpSWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgICB0aGlzLmtleWJvYXJkRXZlbnRzTWFuYWdlciA9IG5ldyBMaXN0S2V5TWFuYWdlcihbLi4uaXRlbXMgYXMgYW55XSk7XG4gICAgICAgIGl0ZW1zW2ldLnRpS2V5Ym9hcmRBY3RpdmUgPSB0cnVlOyAvLyBzZWxlY3QgbmV4dCBpdGVtXG4gICAgICAgIHRoaXMua2V5Ym9hcmRFdmVudHNNYW5hZ2VyLnNldEFjdGl2ZUl0ZW0oaXRlbXNbaV0gYXMgYW55KTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtc1tpXVt0aGlzLmNvbmZpZy5uZXN0ZWRUYWdQcm9wZXJ0eV0gJiYgaXRlbXNbaV1bdGhpcy5jb25maWcubmVzdGVkVGFnUHJvcGVydHldLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnNldEFjdGl2ZUVsZW1lbnRSZWN1cnNpdmVseShpZGVudGlmaWVyLCBpdGVtc1tpXVt0aGlzLmNvbmZpZy5uZXN0ZWRUYWdQcm9wZXJ0eV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19