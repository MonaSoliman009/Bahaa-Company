import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
let AngularTagsInputService = class AngularTagsInputService {
    constructor() {
        this.debugMode = false;
    }
    /**
     * @author Ahsan Ayaz
     * @desc Finds a tag by Id
     * @param tagsData Array of the tags (could be heirarchical)
     * @param tagId identifier of the tag to be found
     * @param config the tags input config
     * @returns the tag found, or `undefined`
     */
    findTagById(tagsData, tagId, config) {
        for (let i = 0, len = tagsData.length; i < len; ++i) {
            // tslint:disable-next-line:triple-equals
            if (tagsData[i][config.identifier] == tagId) {
                return tagsData[i];
            }
            if (tagsData[i][config.nestedTagProperty]) {
                const nestedParentFound = this.findTagById(tagsData[i][config.nestedTagProperty], tagId, config);
                if (nestedParentFound) {
                    return nestedParentFound;
                }
            }
        }
    }
    setDebugMode(mode) {
        this.debugMode = mode;
    }
    log(logMessage, logLabel = '') {
        if (!this.debugMode) {
            return;
        }
        console.log(logLabel, logMessage);
    }
    findParent(tagsArray, tagItem, config) {
        for (let i = 0, len = tagsArray.length; i < len; ++i) {
            // tslint:disable-next-line:triple-equals
            if (tagsArray[i][config.identifier] == tagItem[config.identifier]) {
                return tagsArray[i];
            }
            if (tagsArray[i][config.nestedTagProperty]) {
                const nestedParentFound = this.findParent(tagsArray[i][config.nestedTagProperty], tagItem, config);
                if (nestedParentFound) {
                    return nestedParentFound;
                }
            }
        }
    }
    getMainTagAfterAdding(tagsArray, tagAdded, tags, config) {
        if (tagAdded[config.nestedTagParentProp]) {
            const parentTag = this.findTagById(tagsArray, tagAdded[config.nestedTagParentProp], config);
            if (!parentTag) {
                return;
            }
            const parentTagChildren = parentTag[config.nestedTagProperty].length;
            const childrensSelected = parentTag[config.nestedTagProperty].filter((tagItem) => {
                // tslint:disable-next-line:triple-equals
                return !!tagItem.tiSelected;
            }).length;
            if (parentTagChildren > 0 && childrensSelected > 0 && childrensSelected === parentTagChildren) {
                parentTag.tiSelected = true;
                if (!parentTag[config.nestedTagParentProp]) {
                    return parentTag;
                }
                else {
                    return this.getMainTagAfterAdding(tagsArray, parentTag, tags, config);
                }
            }
        }
        return tagAdded;
    }
};
AngularTagsInputService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AngularTagsInputService_Factory() { return new AngularTagsInputService(); }, token: AngularTagsInputService, providedIn: "root" });
AngularTagsInputService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    })
], AngularTagsInputService);
export { AngularTagsInputService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci10YWdzLWlucHV0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AaW9tZWNocy9hbmd1bGFyLXRhZ3MtaW5wdXQvIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci10YWdzLWlucHV0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTTNDLElBQWEsdUJBQXVCLEdBQXBDLE1BQWEsdUJBQXVCO0lBRWxDO1FBREEsY0FBUyxHQUFHLEtBQUssQ0FBQztJQUNGLENBQUM7SUFFakI7Ozs7Ozs7T0FPRztJQUNILFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQThCO1FBQ3pELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDbkQseUNBQXlDO1lBQ3pDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLEVBQUU7Z0JBQzNDLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3BCO1lBQ0QsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7Z0JBQ3pDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNqRyxJQUFJLGlCQUFpQixFQUFFO29CQUNyQixPQUFPLGlCQUFpQixDQUFDO2lCQUMxQjthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsWUFBWSxDQUFDLElBQWE7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQztJQUVELEdBQUcsQ0FBQyxVQUFlLEVBQUUsUUFBUSxHQUFHLEVBQUU7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsT0FBTztTQUNSO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELFVBQVUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQThCO1FBQzNELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDcEQseUNBQXlDO1lBQ3pDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFO2dCQUNqRSxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQjtZQUNELElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUMxQyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDbkcsSUFBSSxpQkFBaUIsRUFBRTtvQkFDckIsT0FBTyxpQkFBaUIsQ0FBQztpQkFDMUI7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVELHFCQUFxQixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQThCO1FBQzdFLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQ2hDLFNBQVMsRUFDVCxRQUFRLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEVBQ3BDLE1BQU0sQ0FDUCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxPQUFPO2FBQ1I7WUFDRCxNQUFNLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDckUsTUFBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQy9FLHlDQUF5QztnQkFDekMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztZQUM5QixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDVixJQUFJLGlCQUFpQixHQUFHLENBQUMsSUFBSSxpQkFBaUIsR0FBRyxDQUFDLElBQUksaUJBQWlCLEtBQUssaUJBQWlCLEVBQUU7Z0JBQzdGLFNBQVMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO2dCQUM1QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO29CQUMxQyxPQUFPLFNBQVMsQ0FBQztpQkFDbEI7cUJBQU07b0JBQ0wsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQ3ZFO2FBQ0Y7U0FDRjtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Q0FDRixDQUFBOztBQS9FWSx1QkFBdUI7SUFIbkMsVUFBVSxDQUFDO1FBQ1YsVUFBVSxFQUFFLE1BQU07S0FDbkIsQ0FBQztHQUNXLHVCQUF1QixDQStFbkM7U0EvRVksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhclRhZ3NJbnB1dENvbmZpZyB9IGZyb20gJy4vdGFncy1pbnB1dC1pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhclRhZ3NJbnB1dFNlcnZpY2Uge1xuICBkZWJ1Z01vZGUgPSBmYWxzZTtcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvKipcbiAgICogQGF1dGhvciBBaHNhbiBBeWF6XG4gICAqIEBkZXNjIEZpbmRzIGEgdGFnIGJ5IElkXG4gICAqIEBwYXJhbSB0YWdzRGF0YSBBcnJheSBvZiB0aGUgdGFncyAoY291bGQgYmUgaGVpcmFyY2hpY2FsKVxuICAgKiBAcGFyYW0gdGFnSWQgaWRlbnRpZmllciBvZiB0aGUgdGFnIHRvIGJlIGZvdW5kXG4gICAqIEBwYXJhbSBjb25maWcgdGhlIHRhZ3MgaW5wdXQgY29uZmlnXG4gICAqIEByZXR1cm5zIHRoZSB0YWcgZm91bmQsIG9yIGB1bmRlZmluZWRgXG4gICAqL1xuICBmaW5kVGFnQnlJZCh0YWdzRGF0YSwgdGFnSWQsIGNvbmZpZzogQW5ndWxhclRhZ3NJbnB1dENvbmZpZykge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0YWdzRGF0YS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnRyaXBsZS1lcXVhbHNcbiAgICAgIGlmICh0YWdzRGF0YVtpXVtjb25maWcuaWRlbnRpZmllcl0gPT0gdGFnSWQpIHtcbiAgICAgICAgcmV0dXJuIHRhZ3NEYXRhW2ldO1xuICAgICAgfVxuICAgICAgaWYgKHRhZ3NEYXRhW2ldW2NvbmZpZy5uZXN0ZWRUYWdQcm9wZXJ0eV0pIHtcbiAgICAgICAgY29uc3QgbmVzdGVkUGFyZW50Rm91bmQgPSB0aGlzLmZpbmRUYWdCeUlkKHRhZ3NEYXRhW2ldW2NvbmZpZy5uZXN0ZWRUYWdQcm9wZXJ0eV0sIHRhZ0lkLCBjb25maWcpO1xuICAgICAgICBpZiAobmVzdGVkUGFyZW50Rm91bmQpIHtcbiAgICAgICAgICByZXR1cm4gbmVzdGVkUGFyZW50Rm91bmQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzZXREZWJ1Z01vZGUobW9kZTogYm9vbGVhbikge1xuICAgIHRoaXMuZGVidWdNb2RlID0gbW9kZTtcbiAgfVxuXG4gIGxvZyhsb2dNZXNzYWdlOiBhbnksIGxvZ0xhYmVsID0gJycpIHtcbiAgICBpZiAoIXRoaXMuZGVidWdNb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGxvZ0xhYmVsLCBsb2dNZXNzYWdlKTtcbiAgfVxuXG4gIGZpbmRQYXJlbnQodGFnc0FycmF5LCB0YWdJdGVtLCBjb25maWc6IEFuZ3VsYXJUYWdzSW5wdXRDb25maWcpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGFnc0FycmF5Lmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xuICAgICAgaWYgKHRhZ3NBcnJheVtpXVtjb25maWcuaWRlbnRpZmllcl0gPT0gdGFnSXRlbVtjb25maWcuaWRlbnRpZmllcl0pIHtcbiAgICAgICAgcmV0dXJuIHRhZ3NBcnJheVtpXTtcbiAgICAgIH1cbiAgICAgIGlmICh0YWdzQXJyYXlbaV1bY29uZmlnLm5lc3RlZFRhZ1Byb3BlcnR5XSkge1xuICAgICAgICBjb25zdCBuZXN0ZWRQYXJlbnRGb3VuZCA9IHRoaXMuZmluZFBhcmVudCh0YWdzQXJyYXlbaV1bY29uZmlnLm5lc3RlZFRhZ1Byb3BlcnR5XSwgdGFnSXRlbSwgY29uZmlnKTtcbiAgICAgICAgaWYgKG5lc3RlZFBhcmVudEZvdW5kKSB7XG4gICAgICAgICAgcmV0dXJuIG5lc3RlZFBhcmVudEZvdW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0TWFpblRhZ0FmdGVyQWRkaW5nKHRhZ3NBcnJheSwgdGFnQWRkZWQsIHRhZ3MsIGNvbmZpZzogQW5ndWxhclRhZ3NJbnB1dENvbmZpZykge1xuICAgIGlmICh0YWdBZGRlZFtjb25maWcubmVzdGVkVGFnUGFyZW50UHJvcF0pIHtcbiAgICAgIGNvbnN0IHBhcmVudFRhZyA9IHRoaXMuZmluZFRhZ0J5SWQoXG4gICAgICAgIHRhZ3NBcnJheSxcbiAgICAgICAgdGFnQWRkZWRbY29uZmlnLm5lc3RlZFRhZ1BhcmVudFByb3BdLFxuICAgICAgICBjb25maWdcbiAgICAgICk7XG4gICAgICBpZiAoIXBhcmVudFRhZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwYXJlbnRUYWdDaGlsZHJlbiA9IHBhcmVudFRhZ1tjb25maWcubmVzdGVkVGFnUHJvcGVydHldLmxlbmd0aDtcbiAgICAgIGNvbnN0IGNoaWxkcmVuc1NlbGVjdGVkID0gcGFyZW50VGFnW2NvbmZpZy5uZXN0ZWRUYWdQcm9wZXJ0eV0uZmlsdGVyKCh0YWdJdGVtKSA9PiB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0cmlwbGUtZXF1YWxzXG4gICAgICAgIHJldHVybiAhIXRhZ0l0ZW0udGlTZWxlY3RlZDtcbiAgICAgIH0pLmxlbmd0aDtcbiAgICAgIGlmIChwYXJlbnRUYWdDaGlsZHJlbiA+IDAgJiYgY2hpbGRyZW5zU2VsZWN0ZWQgPiAwICYmIGNoaWxkcmVuc1NlbGVjdGVkID09PSBwYXJlbnRUYWdDaGlsZHJlbikge1xuICAgICAgICBwYXJlbnRUYWcudGlTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIGlmICghcGFyZW50VGFnW2NvbmZpZy5uZXN0ZWRUYWdQYXJlbnRQcm9wXSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRUYWc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWFpblRhZ0FmdGVyQWRkaW5nKHRhZ3NBcnJheSwgcGFyZW50VGFnLCB0YWdzLCBjb25maWcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YWdBZGRlZDtcbiAgfVxufVxuIl19