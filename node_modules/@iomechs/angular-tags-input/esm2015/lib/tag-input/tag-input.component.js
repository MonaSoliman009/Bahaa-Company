import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
let TagInputComponent = class TagInputComponent {
    constructor() {
        this.inputClass = 'default';
        this.disabled = false;
        this.valueChanged = new EventEmitter();
        this.inputFocused = new EventEmitter();
        this.inputBlurred = new EventEmitter();
        this.tagEntered = new EventEmitter();
        this.tagInputForm = new FormGroup({
            tagInputVal: new FormControl('')
        });
    }
    ngOnInit() {
        this.tagInputForm.get('tagInputVal')
            .valueChanges
            .pipe(debounceTime(400), distinctUntilChanged())
            .subscribe((value) => {
            this.lastValueEmitted = value;
            this.valueChanged.emit(value);
        });
    }
    ngOnChanges(changes) {
        if (changes.disabled !== undefined) {
            if (changes.disabled.currentValue === true) {
                this.tagInputForm.get('tagInputVal').disable();
            }
            else {
                this.tagInputForm.get('tagInputVal').enable();
            }
        }
    }
    /**
     * @author Ahsan Ayaz
     * @desc Emits the input focused event with the current search term value
     */
    emitInputFocused() {
        if (this.disabled) {
            return;
        }
        const searchTerm = this.tagInputForm.get('tagInputVal').value;
        this.inputFocused.emit(searchTerm);
        if (this.lastValueEmitted !== searchTerm) {
            this.valueChanged.emit(searchTerm);
            this.lastValueEmitted = searchTerm;
        }
    }
    /**
     * @author Ahsan Ayaz
     * @desc When the user presses enter key after entering the tag name
     * @param inputEl - Reference to the input element so we can fetch the value
     */
    onEnterKeyPress() {
        if (this.config.onlyFromAutoComplete) {
            return;
        }
        const tagName = this.inputEl.nativeElement.value;
        this.tagEntered.emit({
            [this.config.displayProperty]: tagName,
            [this.config.identifier]: tagName.toLowerCase(),
            newTag: true
        });
        this.resetInput();
    }
    /**
     * @author Ahsan Ayaz
     * @desc Resets the input value
     */
    resetInput() {
        this.inputEl.nativeElement.value = '';
    }
    emitInputBlurred($event) {
        this.inputBlurred.emit($event);
    }
};
tslib_1.__decorate([
    Input()
], TagInputComponent.prototype, "inputClass", void 0);
tslib_1.__decorate([
    Input()
], TagInputComponent.prototype, "config", void 0);
tslib_1.__decorate([
    Input()
], TagInputComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Output()
], TagInputComponent.prototype, "valueChanged", void 0);
tslib_1.__decorate([
    Output()
], TagInputComponent.prototype, "inputFocused", void 0);
tslib_1.__decorate([
    Output()
], TagInputComponent.prototype, "inputBlurred", void 0);
tslib_1.__decorate([
    Output()
], TagInputComponent.prototype, "tagEntered", void 0);
tslib_1.__decorate([
    ViewChild('inputEl', { static: true })
], TagInputComponent.prototype, "inputEl", void 0);
TagInputComponent = tslib_1.__decorate([
    Component({
        selector: 'ti-tag-input',
        template: "<div class=\"angular-tag-input\" [ngClass]=\"inputClass + ''\">\n  <form no-validate [formGroup]=\"tagInputForm\">\n    <input\n      #inputEl\n      [disabled]=\"disabled\"\n      (keyup.enter)=\"onEnterKeyPress()\"\n      [placeholder]=\"config?.placeholder\"\n      formControlName=\"tagInputVal\"\n      (click)=\"emitInputFocused()\"\n      (focus)=\"emitInputFocused()\"\n      (blur)=\"emitInputBlurred($event)\"\n      class=\"angular-tag-input__input\"\n      autocomplete=\"off\">\n  </form>\n</div>\n",
        styles: [".default .angular-tag-input__input{padding:6px 10px;border:none;width:98%;min-width:100px}.angular-tag-input input:focus{outline-width:0}"]
    })
], TagInputComponent);
export { TagInputComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWlucHV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpb21lY2hzL2FuZ3VsYXItdGFncy1pbnB1dC8iLCJzb3VyY2VzIjpbImxpYi90YWctaW5wdXQvdGFnLWlucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQXdDLE1BQU0sZUFBZSxDQUFDO0FBRWhJLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBT3BFLElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBYTVCO1FBWlMsZUFBVSxHQUFHLFNBQVMsQ0FBQztRQUV2QixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUMxQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDMUMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBQzFDLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBa0IsQ0FBQztRQUUxRCxpQkFBWSxHQUFHLElBQUksU0FBUyxDQUFDO1lBQzNCLFdBQVcsRUFBRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUM7U0FDakMsQ0FBQyxDQUFDO0lBRWEsQ0FBQztJQUVqQixRQUFRO1FBQ04sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDO2FBQ2pDLFlBQVk7YUFDWixJQUFJLENBQ0gsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUNqQixvQkFBb0IsRUFBRSxDQUN2QjthQUNBLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ25CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7WUFDOUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDbEMsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLFlBQVksS0FBSyxJQUFJLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ2hEO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO2FBQy9DO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZ0JBQWdCO1FBQ2QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLE9BQU87U0FDUjtRQUNELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUM5RCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVuQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxVQUFVLEVBQUU7WUFDeEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFVBQVUsQ0FBQztTQUNwQztJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRTtZQUNwQyxPQUFPO1NBQ1I7UUFDRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFDbkIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxFQUFFLE9BQU87WUFDdEMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDL0MsTUFBTSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVU7UUFDUixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxNQUFNO1FBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDRixDQUFBO0FBbkZVO0lBQVIsS0FBSyxFQUFFO3FEQUF3QjtBQUN2QjtJQUFSLEtBQUssRUFBRTtpREFBZ0M7QUFDL0I7SUFBUixLQUFLLEVBQUU7bURBQWtCO0FBQ2hCO0lBQVQsTUFBTSxFQUFFO3VEQUEyQztBQUMxQztJQUFULE1BQU0sRUFBRTt1REFBMkM7QUFDMUM7SUFBVCxNQUFNLEVBQUU7dURBQTJDO0FBQzFDO0lBQVQsTUFBTSxFQUFFO3FEQUFpRDtBQUNsQjtJQUF2QyxTQUFTLENBQUMsU0FBUyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO2tEQUFxQjtBQVJqRCxpQkFBaUI7SUFMN0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGNBQWM7UUFDeEIsMmdCQUF5Qzs7S0FFMUMsQ0FBQztHQUNXLGlCQUFpQixDQW9GN0I7U0FwRlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJUYWdJdGVtLCBBbmd1bGFyVGFnc0lucHV0Q29uZmlnIH0gZnJvbSAnLi4vdGFncy1pbnB1dC1pbnRlcmZhY2VzJztcbmltcG9ydCB7IEZvcm1Hcm91cCwgRm9ybUNvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0aS10YWctaW5wdXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vdGFnLWlucHV0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGFnLWlucHV0LmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVGFnSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGlucHV0Q2xhc3MgPSAnZGVmYXVsdCc7XG4gIEBJbnB1dCgpIGNvbmZpZzogQW5ndWxhclRhZ3NJbnB1dENvbmZpZztcbiAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcbiAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICBAT3V0cHV0KCkgaW5wdXRGb2N1c2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG4gIEBPdXRwdXQoKSBpbnB1dEJsdXJyZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgQE91dHB1dCgpIHRhZ0VudGVyZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEFuZ3VsYXJUYWdJdGVtPigpO1xuICBAVmlld0NoaWxkKCdpbnB1dEVsJywgeyBzdGF0aWM6IHRydWUgfSkgaW5wdXRFbDogRWxlbWVudFJlZjtcbiAgdGFnSW5wdXRGb3JtID0gbmV3IEZvcm1Hcm91cCh7XG4gICAgdGFnSW5wdXRWYWw6IG5ldyBGb3JtQ29udHJvbCgnJylcbiAgfSk7XG4gIGxhc3RWYWx1ZUVtaXR0ZWQ6IHN0cmluZztcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnRhZ0lucHV0Rm9ybS5nZXQoJ3RhZ0lucHV0VmFsJylcbiAgICAgIC52YWx1ZUNoYW5nZXNcbiAgICAgIC5waXBlKFxuICAgICAgICBkZWJvdW5jZVRpbWUoNDAwKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy5sYXN0VmFsdWVFbWl0dGVkID0gdmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQodmFsdWUpO1xuICAgICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuZGlzYWJsZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNoYW5nZXMuZGlzYWJsZWQuY3VycmVudFZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMudGFnSW5wdXRGb3JtLmdldCgndGFnSW5wdXRWYWwnKS5kaXNhYmxlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRhZ0lucHV0Rm9ybS5nZXQoJ3RhZ0lucHV0VmFsJykuZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBhdXRob3IgQWhzYW4gQXlhelxuICAgKiBAZGVzYyBFbWl0cyB0aGUgaW5wdXQgZm9jdXNlZCBldmVudCB3aXRoIHRoZSBjdXJyZW50IHNlYXJjaCB0ZXJtIHZhbHVlXG4gICAqL1xuICBlbWl0SW5wdXRGb2N1c2VkKCkge1xuICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlYXJjaFRlcm0gPSB0aGlzLnRhZ0lucHV0Rm9ybS5nZXQoJ3RhZ0lucHV0VmFsJykudmFsdWU7XG4gICAgdGhpcy5pbnB1dEZvY3VzZWQuZW1pdChzZWFyY2hUZXJtKTtcblxuICAgIGlmICh0aGlzLmxhc3RWYWx1ZUVtaXR0ZWQgIT09IHNlYXJjaFRlcm0pIHtcbiAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQoc2VhcmNoVGVybSk7XG4gICAgICB0aGlzLmxhc3RWYWx1ZUVtaXR0ZWQgPSBzZWFyY2hUZXJtO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcbiAgICogQGRlc2MgV2hlbiB0aGUgdXNlciBwcmVzc2VzIGVudGVyIGtleSBhZnRlciBlbnRlcmluZyB0aGUgdGFnIG5hbWVcbiAgICogQHBhcmFtIGlucHV0RWwgLSBSZWZlcmVuY2UgdG8gdGhlIGlucHV0IGVsZW1lbnQgc28gd2UgY2FuIGZldGNoIHRoZSB2YWx1ZVxuICAgKi9cbiAgb25FbnRlcktleVByZXNzKCkge1xuICAgIGlmICh0aGlzLmNvbmZpZy5vbmx5RnJvbUF1dG9Db21wbGV0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YWdOYW1lID0gdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgdGhpcy50YWdFbnRlcmVkLmVtaXQoe1xuICAgICAgW3RoaXMuY29uZmlnLmRpc3BsYXlQcm9wZXJ0eV06IHRhZ05hbWUsXG4gICAgICBbdGhpcy5jb25maWcuaWRlbnRpZmllcl06IHRhZ05hbWUudG9Mb3dlckNhc2UoKSxcbiAgICAgIG5ld1RhZzogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMucmVzZXRJbnB1dCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBhdXRob3IgQWhzYW4gQXlhelxuICAgKiBAZGVzYyBSZXNldHMgdGhlIGlucHV0IHZhbHVlXG4gICAqL1xuICByZXNldElucHV0KCkge1xuICAgIHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gJyc7XG4gIH1cblxuICBlbWl0SW5wdXRCbHVycmVkKCRldmVudCkge1xuICAgIHRoaXMuaW5wdXRCbHVycmVkLmVtaXQoJGV2ZW50KTtcbiAgfVxufVxuIl19