import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
let TagComponent = class TagComponent {
    constructor() {
        this.tagClass = 'default-tag';
        this.closeClicked = new EventEmitter();
    }
    ngOnInit() {
        if (!this.tagItemTemplate) { // if there's no template provided, assign the default one
            this.tagItemTemplate = this.defaultTagItemTemplate;
        }
        this.context = {
            item: this.tagItem,
            config: this.config,
            tagClass: this.tagClass,
            closeClicked: this.closeClicked
        };
    }
};
tslib_1.__decorate([
    Input()
], TagComponent.prototype, "config", void 0);
tslib_1.__decorate([
    Input()
], TagComponent.prototype, "tagItem", void 0);
tslib_1.__decorate([
    Input()
], TagComponent.prototype, "tagClass", void 0);
tslib_1.__decorate([
    Input()
], TagComponent.prototype, "tagItemTemplate", void 0);
tslib_1.__decorate([
    Output()
], TagComponent.prototype, "closeClicked", void 0);
tslib_1.__decorate([
    ViewChild('defaultTagItemTemplate', { static: true })
], TagComponent.prototype, "defaultTagItemTemplate", void 0);
TagComponent = tslib_1.__decorate([
    Component({
        selector: 'ti-tag',
        template: "\n<ng-container\n *ngTemplateOutlet=\"tagItemTemplate; context: context;\">\n</ng-container>\n\n<!-- Default Tag Options Template -->\n<ng-template #defaultTagItemTemplate let-item=\"item\" let-tagClass=\"tagClass\" let-config=\"config\" let-closeClicked=\"closeClicked\">\n  <div class=\"angular-tag\" [ngClass]=\"tagClass + ''\">\n    <div class=\"angular-tag__text\" *ngIf=\"config\">\n      {{item[config.displayProperty]}}\n    </div>\n    <button type=\"button\" class=\"angular-tag__close-btn\" (click)=\"closeClicked.emit(item)\">\n      x\n    </button>\n  </div>\n</ng-template>\n\n\n",
        styles: [".angular-tag{display:flex;align-items:center}.angular-tag__text{margin-right:10px;flex:1}.default-tag .angular-tag__text{color:#fff}.angular-tag__close-btn{cursor:pointer}.default-tag .angular-tag__close-btn{padding-left:0;padding-right:0;background:0 0;border:none;color:#fff}.default-tag .angular-tag__close-btn:hover{color:#dcdcdc}.angular-tag.default-tag{background:#344860;padding:6px 10px;transition:.5s}.angular-tag.default-tag:hover{background:#333}"]
    })
], TagComponent);
export { TagComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpb21lY2hzL2FuZ3VsYXItdGFncy1pbnB1dC8iLCJzb3VyY2VzIjpbImxpYi90YWcvdGFnLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBZSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFTdkcsSUFBYSxZQUFZLEdBQXpCLE1BQWEsWUFBWTtJQVF2QjtRQUxTLGFBQVEsR0FBRyxhQUFhLENBQUM7UUFFeEIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBa0IsQ0FBQztJQUc1QyxDQUFDO0lBRWpCLFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFFLDBEQUEwRDtZQUNyRixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztTQUNwRDtRQUNELElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDbEIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7U0FDaEMsQ0FBQztJQUNKLENBQUM7Q0FFRixDQUFBO0FBckJVO0lBQVIsS0FBSyxFQUFFOzRDQUFnQztBQUMvQjtJQUFSLEtBQUssRUFBRTs2Q0FBeUI7QUFDeEI7SUFBUixLQUFLLEVBQUU7OENBQTBCO0FBQ3pCO0lBQVIsS0FBSyxFQUFFO3FEQUFtQztBQUNqQztJQUFULE1BQU0sRUFBRTtrREFBbUQ7QUFDTDtJQUF0RCxTQUFTLENBQUMsd0JBQXdCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7NERBQTBDO0FBTnJGLFlBQVk7SUFMeEIsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFFBQVE7UUFDbEIsOGxCQUFtQzs7S0FFcEMsQ0FBQztHQUNXLFlBQVksQ0FzQnhCO1NBdEJZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEFuZ3VsYXJUYWdJdGVtLCBBbmd1bGFyVGFnc0lucHV0Q29uZmlnIH0gZnJvbSAnLi4vdGFncy1pbnB1dC1pbnRlcmZhY2VzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGktdGFnJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RhZy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3RhZy5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRhZ0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGNvbmZpZzogQW5ndWxhclRhZ3NJbnB1dENvbmZpZztcbiAgQElucHV0KCkgdGFnSXRlbTogQW5ndWxhclRhZ0l0ZW07XG4gIEBJbnB1dCgpIHRhZ0NsYXNzID0gJ2RlZmF1bHQtdGFnJztcbiAgQElucHV0KCkgdGFnSXRlbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBAT3V0cHV0KCkgY2xvc2VDbGlja2VkID0gbmV3IEV2ZW50RW1pdHRlcjxBbmd1bGFyVGFnSXRlbT4oKTtcbiAgQFZpZXdDaGlsZCgnZGVmYXVsdFRhZ0l0ZW1UZW1wbGF0ZScsIHsgc3RhdGljOiB0cnVlIH0pIGRlZmF1bHRUYWdJdGVtVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gIGNvbnRleHQ6IGFueTtcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBpZiAoIXRoaXMudGFnSXRlbVRlbXBsYXRlKSB7IC8vIGlmIHRoZXJlJ3Mgbm8gdGVtcGxhdGUgcHJvdmlkZWQsIGFzc2lnbiB0aGUgZGVmYXVsdCBvbmVcbiAgICAgIHRoaXMudGFnSXRlbVRlbXBsYXRlID0gdGhpcy5kZWZhdWx0VGFnSXRlbVRlbXBsYXRlO1xuICAgIH1cbiAgICB0aGlzLmNvbnRleHQgPSB7XG4gICAgICBpdGVtOiB0aGlzLnRhZ0l0ZW0sXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgdGFnQ2xhc3M6IHRoaXMudGFnQ2xhc3MsXG4gICAgICBjbG9zZUNsaWNrZWQ6IHRoaXMuY2xvc2VDbGlja2VkXG4gICAgfTtcbiAgfVxuXG59XG4iXX0=