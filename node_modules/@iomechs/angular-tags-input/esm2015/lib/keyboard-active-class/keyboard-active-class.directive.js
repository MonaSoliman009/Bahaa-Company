import * as tslib_1 from "tslib";
import { Directive, Input, OnChanges, SimpleChanges, ElementRef, ChangeDetectorRef, OnInit } from '@angular/core';
let KeyboardActiveClassDirective = class KeyboardActiveClassDirective {
    constructor(el, cdRef) {
        this.el = el;
        this.cdRef = cdRef;
        this.isKeyboardActiveItem = false;
    }
    ngOnInit() {
        if (!this.tiKeyboardActiveClass) {
            console.warn('tiKeyboardActiveClass needs a class to apply. But no class was passed.');
        }
    }
    ngOnChanges(simpleChanges) {
        if (!simpleChanges.isKeyboardActiveItem) {
            return;
        }
        if (simpleChanges.isKeyboardActiveItem.currentValue !== simpleChanges.isKeyboardActiveItem.previousValue) {
            this.evaluateClassApplication();
        }
    }
    evaluateClassApplication() {
        if (this.isKeyboardActiveItem) {
            this.el.nativeElement.classList.add(this.tiKeyboardActiveClass);
            this.el.nativeElement.scrollIntoView(false);
        }
        else {
            this.el.nativeElement.classList.remove(this.tiKeyboardActiveClass);
        }
        this.cdRef.markForCheck();
    }
};
KeyboardActiveClassDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input()
], KeyboardActiveClassDirective.prototype, "isKeyboardActiveItem", void 0);
tslib_1.__decorate([
    Input()
], KeyboardActiveClassDirective.prototype, "tiKeyboardActiveClass", void 0);
KeyboardActiveClassDirective = tslib_1.__decorate([
    Directive({
        selector: '[tiKeyboardActiveClass]'
    })
], KeyboardActiveClassDirective);
export { KeyboardActiveClassDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtYWN0aXZlLWNsYXNzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bpb21lY2hzL2FuZ3VsYXItdGFncy1pbnB1dC8iLCJzb3VyY2VzIjpbImxpYi9rZXlib2FyZC1hY3RpdmUtY2xhc3Mva2V5Ym9hcmQtYWN0aXZlLWNsYXNzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS2xILElBQWEsNEJBQTRCLEdBQXpDLE1BQWEsNEJBQTRCO0lBR3ZDLFlBQW9CLEVBQWMsRUFBVSxLQUF3QjtRQUFoRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFGM0QseUJBQW9CLEdBQUcsS0FBSyxDQUFDO0lBRWtDLENBQUM7SUFFekUsUUFBUTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDL0IsT0FBTyxDQUFDLElBQUksQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDO1NBQ3hGO0lBQ0gsQ0FBQztJQUVELFdBQVcsQ0FBQyxhQUE0QjtRQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLG9CQUFvQixFQUFFO1lBQ3ZDLE9BQU87U0FDUjtRQUNELElBQUksYUFBYSxDQUFDLG9CQUFvQixDQUFDLFlBQVksS0FBSyxhQUFhLENBQUMsb0JBQW9CLENBQUMsYUFBYSxFQUFFO1lBQ3hHLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELHdCQUF3QjtRQUN0QixJQUFJLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUM3QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0wsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztTQUNwRTtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUIsQ0FBQztDQUVGLENBQUE7O1lBM0J5QixVQUFVO1lBQWlCLGlCQUFpQjs7QUFGM0Q7SUFBUixLQUFLLEVBQUU7MEVBQThCO0FBQzdCO0lBQVIsS0FBSyxFQUFFOzJFQUErQjtBQUY1Qiw0QkFBNEI7SUFIeEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHlCQUF5QjtLQUNwQyxDQUFDO0dBQ1csNEJBQTRCLENBOEJ4QztTQTlCWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIEVsZW1lbnRSZWYsIENoYW5nZURldGVjdG9yUmVmLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3RpS2V5Ym9hcmRBY3RpdmVDbGFzc10nXG59KVxuZXhwb3J0IGNsYXNzIEtleWJvYXJkQWN0aXZlQ2xhc3NEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIGlzS2V5Ym9hcmRBY3RpdmVJdGVtID0gZmFsc2U7XG4gIEBJbnB1dCgpIHRpS2V5Ym9hcmRBY3RpdmVDbGFzczogc3RyaW5nO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZikgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLnRpS2V5Ym9hcmRBY3RpdmVDbGFzcykge1xuICAgICAgY29uc29sZS53YXJuKCd0aUtleWJvYXJkQWN0aXZlQ2xhc3MgbmVlZHMgYSBjbGFzcyB0byBhcHBseS4gQnV0IG5vIGNsYXNzIHdhcyBwYXNzZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoc2ltcGxlQ2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICghc2ltcGxlQ2hhbmdlcy5pc0tleWJvYXJkQWN0aXZlSXRlbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2ltcGxlQ2hhbmdlcy5pc0tleWJvYXJkQWN0aXZlSXRlbS5jdXJyZW50VmFsdWUgIT09IHNpbXBsZUNoYW5nZXMuaXNLZXlib2FyZEFjdGl2ZUl0ZW0ucHJldmlvdXNWYWx1ZSkge1xuICAgICAgdGhpcy5ldmFsdWF0ZUNsYXNzQXBwbGljYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBldmFsdWF0ZUNsYXNzQXBwbGljYXRpb24oKSB7XG4gICAgaWYgKHRoaXMuaXNLZXlib2FyZEFjdGl2ZUl0ZW0pIHtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMudGlLZXlib2FyZEFjdGl2ZUNsYXNzKTtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zY3JvbGxJbnRvVmlldyhmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMudGlLZXlib2FyZEFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgdGhpcy5jZFJlZi5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG59XG4iXX0=